
inzynierka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000545c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800581c  0800581c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005824  08005824  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800582c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000804  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000874  20000874  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e46  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268d  00000000  00000000  00033ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00036578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002627e  00000000  00000000  000385e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a1b  00000000  00000000  0005e85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3fd4  00000000  00000000  00071279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015524d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f50  00000000  00000000  001552a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080055f4 	.word	0x080055f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080055f4 	.word	0x080055f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <bluetooth_sendStartMessage>:
uint8_t receivedColours[6];
uint8_t receivedBasicMenu;
uint8_t receivedImage;

void bluetooth_sendStartMessage()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000598:	2064      	movs	r0, #100	; 0x64
 800059a:	f000 fea7 	bl	80012ec <HAL_Delay>
	printf("Menu komend:\r\n1 - zmiana koloru\r\n2 - zmiana wzoru\r\n");
 800059e:	4802      	ldr	r0, [pc, #8]	; (80005a8 <bluetooth_sendStartMessage+0x14>)
 80005a0:	f004 f8aa 	bl	80046f8 <puts>

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	0800560c 	.word	0x0800560c

080005ac <bluetooth_sendNotKnowMessage>:

void bluetooth_sendNotKnowMessage()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	printf("Niepoprawnie wprowadzona komenda!\r\n");
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <bluetooth_sendNotKnowMessage+0x10>)
 80005b2:	f004 f8a1 	bl	80046f8 <puts>


}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	08005640 	.word	0x08005640

080005c0 <bluetooth_reciveBasicMenu>:
void bluetooth_reciveBasicMenu()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, receivedBasicMenu, 1);
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <bluetooth_reciveBasicMenu+0x18>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <bluetooth_reciveBasicMenu+0x1c>)
 80005ce:	f002 fd36 	bl	800303e <HAL_UART_Receive_IT>

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000092 	.word	0x20000092
 80005dc:	20000304 	.word	0x20000304

080005e0 <bluetooth_reciveExpandedMenu_Coulors>:
void bluetooth_reciveExpandedMenu_Coulors()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, receivedColours, 6);
 80005e4:	2206      	movs	r2, #6
 80005e6:	4903      	ldr	r1, [pc, #12]	; (80005f4 <bluetooth_reciveExpandedMenu_Coulors+0x14>)
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <bluetooth_reciveExpandedMenu_Coulors+0x18>)
 80005ea:	f002 fd28 	bl	800303e <HAL_UART_Receive_IT>

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	20000304 	.word	0x20000304

080005fc <bluetooth_reciveExpandedMenu_Images>:
void bluetooth_reciveExpandedMenu_Images()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart2, receivedImage, 1);
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <bluetooth_reciveExpandedMenu_Images+0x18>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <bluetooth_reciveExpandedMenu_Images+0x1c>)
 800060a:	f002 fd18 	bl	800303e <HAL_UART_Receive_IT>


}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000093 	.word	0x20000093
 8000618:	20000304 	.word	0x20000304

0800061c <bluetooth_sendExpandedMenu>:
void bluetooth_sendExpandedMenu(uint8_t menuOption)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	switch(menuOption)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d00e      	beq.n	800064a <bluetooth_sendExpandedMenu+0x2e>
 800062c:	2b03      	cmp	r3, #3
 800062e:	dc0f      	bgt.n	8000650 <bluetooth_sendExpandedMenu+0x34>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d002      	beq.n	800063a <bluetooth_sendExpandedMenu+0x1e>
 8000634:	2b02      	cmp	r3, #2
 8000636:	d004      	beq.n	8000642 <bluetooth_sendExpandedMenu+0x26>
			break;
		case 3:
			bluetooth_sendStartMessage();
			break;
		default:
			break;
 8000638:	e00a      	b.n	8000650 <bluetooth_sendExpandedMenu+0x34>
			printf("Podaj kolor uzywajac RGB kodow, za pomoca wartosci hex\r\nWartosci nie oddzielaj pojedycza spacja np FF99CC\r\n");
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <bluetooth_sendExpandedMenu+0x40>)
 800063c:	f004 f85c 	bl	80046f8 <puts>
			break;
 8000640:	e007      	b.n	8000652 <bluetooth_sendExpandedMenu+0x36>
			printf("Menu wzorow:\r\nA - slonce\r\nB - kwiatek\r\nC - kregi\r\n");
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <bluetooth_sendExpandedMenu+0x44>)
 8000644:	f004 f858 	bl	80046f8 <puts>
			break;
 8000648:	e003      	b.n	8000652 <bluetooth_sendExpandedMenu+0x36>
			bluetooth_sendStartMessage();
 800064a:	f7ff ffa3 	bl	8000594 <bluetooth_sendStartMessage>
			break;
 800064e:	e000      	b.n	8000652 <bluetooth_sendExpandedMenu+0x36>
			break;
 8000650:	bf00      	nop
	}

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	08005664 	.word	0x08005664
 8000660:	080056d0 	.word	0x080056d0

08000664 <__io_putchar>:
int __io_putchar(int ch)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b0a      	cmp	r3, #10
 8000670:	d102      	bne.n	8000678 <__io_putchar+0x14>
	    __io_putchar('\r');
 8000672:	200d      	movs	r0, #13
 8000674:	f7ff fff6 	bl	8000664 <__io_putchar>
	}

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <__io_putchar+0x2c>)
 8000682:	f002 fc4a 	bl	8002f1a <HAL_UART_Transmit>
    return 1;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000304 	.word	0x20000304

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fdb6 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f814 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f962 	bl	8000968 <MX_GPIO_Init>
  MX_ETH_Init();
 80006a4:	f000 f87a 	bl	800079c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a8:	f000 f930 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 f8e8 	bl	8000880 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80006b0:	f000 f8c2 	bl	8000838 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <main+0x30>)
 80006b6:	f002 fad3 	bl	8002c60 <HAL_TIM_Base_Start_IT>
  bluetooth_sendStartMessage();
 80006ba:	f7ff ff6b 	bl	8000594 <bluetooth_sendStartMessage>
  bluetooth_reciveBasicMenu();
 80006be:	f7ff ff7f 	bl	80005c0 <bluetooth_reciveBasicMenu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <main+0x2e>
 80006c4:	200002bc 	.word	0x200002bc

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 ff80 	bl	80045dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000728:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fd9f 	bl	8002290 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9c6 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f002 f800 	bl	8002780 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9af 	bl	8000ae8 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_ETH_Init+0x84>)
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <MX_ETH_Init+0x88>)
 80007a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_ETH_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ETH_Init+0x8c>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_ETH_Init+0x8c>)
 80007b4:	22e1      	movs	r2, #225	; 0xe1
 80007b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_ETH_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_ETH_Init+0x8c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_ETH_Init+0x84>)
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_ETH_Init+0x8c>)
 80007ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_ETH_Init+0x84>)
 80007d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_ETH_Init+0x84>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_ETH_Init+0x90>)
 80007dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_ETH_Init+0x84>)
 80007e0:	4a13      	ldr	r2, [pc, #76]	; (8000830 <MX_ETH_Init+0x94>)
 80007e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_ETH_Init+0x84>)
 80007e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_ETH_Init+0x84>)
 80007ee:	f000 ff45 	bl	800167c <HAL_ETH_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f976 	bl	8000ae8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007fc:	2238      	movs	r2, #56	; 0x38
 80007fe:	2100      	movs	r1, #0
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_ETH_Init+0x98>)
 8000802:	f003 feeb 	bl	80045dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_ETH_Init+0x98>)
 8000808:	2221      	movs	r2, #33	; 0x21
 800080a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_ETH_Init+0x98>)
 800080e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000812:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_ETH_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000020c 	.word	0x2000020c
 8000824:	40028000 	.word	0x40028000
 8000828:	20000854 	.word	0x20000854
 800082c:	2000016c 	.word	0x2000016c
 8000830:	200000cc 	.word	0x200000cc
 8000834:	20000094 	.word	0x20000094

08000838 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_TIM11_Init+0x40>)
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <MX_TIM11_Init+0x44>)
 8000840:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_TIM11_Init+0x40>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_TIM11_Init+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_TIM11_Init+0x40>)
 8000850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000854:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_TIM11_Init+0x40>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_TIM11_Init+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_TIM11_Init+0x40>)
 8000864:	f002 f9ac 	bl	8002bc0 <HAL_TIM_Base_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800086e:	f000 f93b 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002bc 	.word	0x200002bc
 800087c:	40014800 	.word	0x40014800

08000880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 8000888:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_USART2_UART_Init+0x7c>)
 800088a:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 800088e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000892:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 80008a8:	220c      	movs	r2, #12
 80008aa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <MX_USART2_UART_Init+0x78>)
 80008ba:	f002 fae1 	bl	8002e80 <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80008c4:	f000 f910 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  for(int i =0; i<6; i++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	e007      	b.n	80008de <MX_USART2_UART_Init+0x5e>
  {
  	receivedColours[i]=0;
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x80>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
  for(int i =0; i<6; i++)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	ddf4      	ble.n	80008ce <MX_USART2_UART_Init+0x4e>
  }
  receivedBasicMenu=0;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_USART2_UART_Init+0x84>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
  receivedImage=0;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_USART2_UART_Init+0x88>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000304 	.word	0x20000304
 80008fc:	40004400 	.word	0x40004400
 8000900:	2000008c 	.word	0x2000008c
 8000904:	20000092 	.word	0x20000092
 8000908:	20000093 	.word	0x20000093

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2204      	movs	r2, #4
 800091c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2201      	movs	r2, #1
 8000934:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2201      	movs	r2, #1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f001 fb81 	bl	8002056 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8c5 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000348 	.word	0x20000348

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a53      	ldr	r2, [pc, #332]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a45      	ldr	r2, [pc, #276]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b3f      	ldr	r3, [pc, #252]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a3e      	ldr	r2, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a37      	ldr	r2, [pc, #220]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <MX_GPIO_Init+0x16c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a2c:	482a      	ldr	r0, [pc, #168]	; (8000ad8 <MX_GPIO_Init+0x170>)
 8000a2e:	f001 faf9 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	4829      	ldr	r0, [pc, #164]	; (8000adc <MX_GPIO_Init+0x174>)
 8000a38:	f001 faf4 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0x178>)
 8000a54:	f001 f93a 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a58:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <MX_GPIO_Init+0x170>)
 8000a72:	f001 f92b 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x17c>)
 8000a94:	f001 f91a 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a98:	2340      	movs	r3, #64	; 0x40
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <MX_GPIO_Init+0x174>)
 8000ab0:	f001 f90c 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0x174>)
 8000ac8:	f001 f900 	bl	8001ccc <HAL_GPIO_Init>

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <Error_Handler+0x20>)
 8000af6:	f001 fa95 	bl	8002024 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4802      	ldr	r0, [pc, #8]	; (8000b08 <Error_Handler+0x20>)
 8000b00:	f001 fa90 	bl	8002024 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000b04:	e7f4      	b.n	8000af0 <Error_Handler+0x8>
 8000b06:	bf00      	nop
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a55      	ldr	r2, [pc, #340]	; (8000cd0 <HAL_ETH_MspInit+0x174>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	f040 80a4 	bne.w	8000cc8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a52      	ldr	r2, [pc, #328]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a4b      	ldr	r2, [pc, #300]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a44      	ldr	r2, [pc, #272]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b3b      	ldr	r3, [pc, #236]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a36      	ldr	r2, [pc, #216]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c36:	6313      	str	r3, [r2, #48]	; 0x30
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_ETH_MspInit+0x178>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c44:	2332      	movs	r3, #50	; 0x32
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481e      	ldr	r0, [pc, #120]	; (8000cd8 <HAL_ETH_MspInit+0x17c>)
 8000c60:	f001 f834 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c64:	2386      	movs	r3, #134	; 0x86
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4817      	ldr	r0, [pc, #92]	; (8000cdc <HAL_ETH_MspInit+0x180>)
 8000c80:	f001 f824 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c96:	230b      	movs	r3, #11
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480f      	ldr	r0, [pc, #60]	; (8000ce0 <HAL_ETH_MspInit+0x184>)
 8000ca2:	f001 f813 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ca6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb8:	230b      	movs	r3, #11
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <HAL_ETH_MspInit+0x188>)
 8000cc4:	f001 f802 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3738      	adds	r7, #56	; 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40028000 	.word	0x40028000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	40021800 	.word	0x40021800

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10d      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_TIM_Base_MspInit+0x40>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40014800 	.word	0x40014800
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <HAL_UART_MspInit+0xd0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d151      	bne.n	8000df2 <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a2a      	ldr	r2, [pc, #168]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_UART_MspInit+0xd4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da2:	2308      	movs	r3, #8
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <HAL_UART_MspInit+0xd8>)
 8000dbe:	f000 ff85 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <HAL_UART_MspInit+0xdc>)
 8000dde:	f000 ff75 	bl	8001ccc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2026      	movs	r0, #38	; 0x26
 8000de8:	f000 fb7f 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dec:	2026      	movs	r0, #38	; 0x26
 8000dee:	f000 fb98 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020c00 	.word	0x40020c00

08000e0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e2c:	d13f      	bne.n	8000eae <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e4a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4815      	ldr	r0, [pc, #84]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e68:	f000 ff30 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480e      	ldr	r0, [pc, #56]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e82:	f000 ff23 	bl	8001ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	6353      	str	r3, [r2, #52]	; 0x34
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f9ce 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f1a:	4842      	ldr	r0, [pc, #264]	; (8001024 <USART2_IRQHandler+0x110>)
 8000f1c:	f002 f8c0 	bl	80030a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(receivedBasicMenu!=0)
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <USART2_IRQHandler+0x114>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d018      	beq.n	8000f5a <USART2_IRQHandler+0x46>
  {
	  switch(receivedBasicMenu){
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <USART2_IRQHandler+0x114>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d002      	beq.n	8000f36 <USART2_IRQHandler+0x22>
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d008      	beq.n	8000f46 <USART2_IRQHandler+0x32>
 8000f34:	e00e      	b.n	8000f54 <USART2_IRQHandler+0x40>
	  	  case 1:
	  		  bluetooth_sendExpandedMenu(receivedBasicMenu);
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <USART2_IRQHandler+0x114>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fb6e 	bl	800061c <bluetooth_sendExpandedMenu>
	  		  bluetooth_reciveExpandedMenu_Images();
 8000f40:	f7ff fb5c 	bl	80005fc <bluetooth_reciveExpandedMenu_Images>
	  		  break;
 8000f44:	e06a      	b.n	800101c <USART2_IRQHandler+0x108>
	  	  case 2:
	  		  bluetooth_sendExpandedMenu(receivedBasicMenu);
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <USART2_IRQHandler+0x114>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fb66 	bl	800061c <bluetooth_sendExpandedMenu>
	  		  bluetooth_reciveExpandedMenu_Coulors();
 8000f50:	f7ff fb46 	bl	80005e0 <bluetooth_reciveExpandedMenu_Coulors>
	  	  default:
	  		  bluetooth_sendNotKnowMessage();
 8000f54:	f7ff fb2a 	bl	80005ac <bluetooth_sendNotKnowMessage>
	  		  break;
 8000f58:	e060      	b.n	800101c <USART2_IRQHandler+0x108>
	  }
  }
  else if(receivedColours[0]!=0)
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <USART2_IRQHandler+0x118>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d031      	beq.n	8000fc6 <USART2_IRQHandler+0xb2>
  {
	  char char_colours[6];
	  for(int i=0; i<6;i++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	e017      	b.n	8000f98 <USART2_IRQHandler+0x84>
	  {
		  char_colours[i]= (receivedColours[i]%10)+48;
 8000f68:	4a30      	ldr	r2, [pc, #192]	; (800102c <USART2_IRQHandler+0x118>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <USART2_IRQHandler+0x11c>)
 8000f72:	fba3 1302 	umull	r1, r3, r3, r2
 8000f76:	08d9      	lsrs	r1, r3, #3
 8000f78:	460b      	mov	r3, r1
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	3330      	adds	r3, #48	; 0x30
 8000f86:	b2d9      	uxtb	r1, r3
 8000f88:	463a      	mov	r2, r7
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	460a      	mov	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<6;i++)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3301      	adds	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	dde4      	ble.n	8000f68 <USART2_IRQHandler+0x54>
	  }
	  printf("Odebrano: %s", char_colours);
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4824      	ldr	r0, [pc, #144]	; (8001034 <USART2_IRQHandler+0x120>)
 8000fa4:	f003 fb22 	bl	80045ec <iprintf>
	  for(int i =0; i<6; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	e007      	b.n	8000fbe <USART2_IRQHandler+0xaa>
	  {
		  receivedColours[i]=0;
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <USART2_IRQHandler+0x118>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
	  for(int i =0; i<6; i++)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	ddf4      	ble.n	8000fae <USART2_IRQHandler+0x9a>
	  	{
	  			bluetooth_sendNotKnowMessage();
	  	}
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8000fc4:	e02a      	b.n	800101c <USART2_IRQHandler+0x108>
  else if(receivedImage!=0)
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <USART2_IRQHandler+0x124>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d026      	beq.n	800101c <USART2_IRQHandler+0x108>
	  if (receivedImage == 65)
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <USART2_IRQHandler+0x124>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b41      	cmp	r3, #65	; 0x41
 8000fd4:	d103      	bne.n	8000fde <USART2_IRQHandler+0xca>
	  		printf("\t[LED] slonce wyswietlenie\r\n");
 8000fd6:	4819      	ldr	r0, [pc, #100]	; (800103c <USART2_IRQHandler+0x128>)
 8000fd8:	f003 fb8e 	bl	80046f8 <puts>
}
 8000fdc:	e01e      	b.n	800101c <USART2_IRQHandler+0x108>
	  	else if (receivedImage == 66)
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <USART2_IRQHandler+0x124>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b42      	cmp	r3, #66	; 0x42
 8000fe4:	d103      	bne.n	8000fee <USART2_IRQHandler+0xda>
	  		printf("\t[LED] kwiatek wyswietlenie\r\n");
 8000fe6:	4816      	ldr	r0, [pc, #88]	; (8001040 <USART2_IRQHandler+0x12c>)
 8000fe8:	f003 fb86 	bl	80046f8 <puts>
}
 8000fec:	e016      	b.n	800101c <USART2_IRQHandler+0x108>
	  	else if (receivedImage == 67)
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <USART2_IRQHandler+0x124>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b43      	cmp	r3, #67	; 0x43
 8000ff4:	d103      	bne.n	8000ffe <USART2_IRQHandler+0xea>
	  		printf( "\t[LED] okregi wyswietlenie\r\n");
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <USART2_IRQHandler+0x130>)
 8000ff8:	f003 fb7e 	bl	80046f8 <puts>
}
 8000ffc:	e00e      	b.n	800101c <USART2_IRQHandler+0x108>
	  	else if((receivedImage!= 65) && (receivedImage!= 66) && (receivedImage!= 67) )
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <USART2_IRQHandler+0x124>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b41      	cmp	r3, #65	; 0x41
 8001004:	d00a      	beq.n	800101c <USART2_IRQHandler+0x108>
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <USART2_IRQHandler+0x124>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b42      	cmp	r3, #66	; 0x42
 800100c:	d006      	beq.n	800101c <USART2_IRQHandler+0x108>
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <USART2_IRQHandler+0x124>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b43      	cmp	r3, #67	; 0x43
 8001014:	d002      	beq.n	800101c <USART2_IRQHandler+0x108>
	  			bluetooth_sendNotKnowMessage();
 8001016:	f7ff fac9 	bl	80005ac <bluetooth_sendNotKnowMessage>
}
 800101a:	e7ff      	b.n	800101c <USART2_IRQHandler+0x108>
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000304 	.word	0x20000304
 8001028:	20000092 	.word	0x20000092
 800102c:	2000008c 	.word	0x2000008c
 8001030:	cccccccd 	.word	0xcccccccd
 8001034:	08005704 	.word	0x08005704
 8001038:	20000093 	.word	0x20000093
 800103c:	08005714 	.word	0x08005714
 8001040:	08005730 	.word	0x08005730
 8001044:	08005750 	.word	0x08005750

08001048 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e00a      	b.n	8001070 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800105a:	f3af 8000 	nop.w
 800105e:	4601      	mov	r1, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	b2ca      	uxtb	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf0      	blt.n	800105a <_read+0x12>
  }

  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e009      	b.n	80010a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fae1 	bl	8000664 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf1      	blt.n	8001094 <_write+0x12>
  }
  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_close>:

int _close(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e2:	605a      	str	r2, [r3, #4]
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_isatty>:

int _isatty(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f003 fa18 	bl	8004588 <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20030000 	.word	0x20030000
 8001184:	00000400 	.word	0x00000400
 8001188:	2000085c 	.word	0x2000085c
 800118c:	20000878 	.word	0x20000878

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ba:	490e      	ldr	r1, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d0:	4c0b      	ldr	r4, [pc, #44]	; (8001200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011de:	f7ff ffd7 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f003 f9d7 	bl	8004594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff fa55 	bl	8000694 <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011f8:	0800582c 	.word	0x0800582c
  ldr r2, =_sbss
 80011fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001200:	20000874 	.word	0x20000874

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f94f 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f808 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff fc66 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f967 	bl	800153e <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 f92f 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000860 	.word	0x20000860

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000860 	.word	0x20000860

080012ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff ffee 	bl	80012d4 <HAL_GetTick>
 80012f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d005      	beq.n	8001312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_Delay+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001312:	bf00      	nop
 8001314:	f7ff ffde 	bl	80012d4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	429a      	cmp	r2, r3
 8001322:	d8f7      	bhi.n	8001314 <HAL_Delay+0x28>
  {
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <__NVIC_EnableIRQ+0x38>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff8e 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff29 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff3e 	bl	800137c <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff8e 	bl	8001428 <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5d 	bl	80013d4 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff31 	bl	8001398 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff feb6 	bl	80012d4 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d008      	beq.n	8001588 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e052      	b.n	800162e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0216 	bic.w	r2, r2, #22
 8001596:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d103      	bne.n	80015b8 <HAL_DMA_Abort+0x62>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0208 	bic.w	r2, r2, #8
 80015c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d8:	e013      	b.n	8001602 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015da:	f7ff fe7b 	bl	80012d4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d90c      	bls.n	8001602 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e015      	b.n	800162e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e4      	bne.n	80015da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	223f      	movs	r2, #63	; 0x3f
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d004      	beq.n	8001654 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e00c      	b.n	800166e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2205      	movs	r2, #5
 8001658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06c      	b.n	8001768 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001694:	2b00      	cmp	r3, #0
 8001696:	d106      	bne.n	80016a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2223      	movs	r2, #35	; 0x23
 800169c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fa5b 	bl	8000b5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a30      	ldr	r2, [pc, #192]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_ETH_Init+0xf8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <HAL_ETH_Init+0xf8>)
 80016c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_ETH_Init+0xf8>)
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4927      	ldr	r1, [pc, #156]	; (8001774 <HAL_ETH_Init+0xf8>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_ETH_Init+0xf8>)
 80016de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f8:	f7ff fdec 	bl	80012d4 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016fe:	e011      	b.n	8001724 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001700:	f7ff fde8 	bl	80012d4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800170e:	d909      	bls.n	8001724 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2204      	movs	r2, #4
 8001714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	22e0      	movs	r2, #224	; 0xe0
 800171c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e021      	b.n	8001768 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1e4      	bne.n	8001700 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f958 	bl	80019ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f9ff 	bl	8001b40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fa55 	bl	8001bf2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	461a      	mov	r2, r3
 800174e:	2100      	movs	r1, #0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f9bd 	bl	8001ad0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2210      	movs	r2, #16
 8001762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	40013800 	.word	0x40013800

08001778 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <ETH_SetMACConfig+0x15c>)
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	7c1b      	ldrb	r3, [r3, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <ETH_SetMACConfig+0x28>
 800179a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800179e:	e000      	b.n	80017a2 <ETH_SetMACConfig+0x2a>
 80017a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	7c5b      	ldrb	r3, [r3, #17]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <ETH_SetMACConfig+0x38>
 80017aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ae:	e000      	b.n	80017b2 <ETH_SetMACConfig+0x3a>
 80017b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	7fdb      	ldrb	r3, [r3, #31]
 80017be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	7f92      	ldrb	r2, [r2, #30]
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	d102      	bne.n	80017d6 <ETH_SetMACConfig+0x5e>
 80017d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d4:	e000      	b.n	80017d8 <ETH_SetMACConfig+0x60>
 80017d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80017d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	7f1b      	ldrb	r3, [r3, #28]
 80017de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80017ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d102      	bne.n	8001800 <ETH_SetMACConfig+0x88>
 80017fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fe:	e000      	b.n	8001802 <ETH_SetMACConfig+0x8a>
 8001800:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001802:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	7bdb      	ldrb	r3, [r3, #15]
 8001808:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800180a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001810:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001818:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800181a:	4313      	orrs	r3, r2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff fd5a 	bl	80012ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001856:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800185e:	2a00      	cmp	r2, #0
 8001860:	d101      	bne.n	8001866 <ETH_SetMACConfig+0xee>
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	e000      	b.n	8001868 <ETH_SetMACConfig+0xf0>
 8001866:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001868:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800186e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001876:	2a01      	cmp	r2, #1
 8001878:	d101      	bne.n	800187e <ETH_SetMACConfig+0x106>
 800187a:	2208      	movs	r2, #8
 800187c:	e000      	b.n	8001880 <ETH_SetMACConfig+0x108>
 800187e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001880:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001888:	2a01      	cmp	r2, #1
 800188a:	d101      	bne.n	8001890 <ETH_SetMACConfig+0x118>
 800188c:	2204      	movs	r2, #4
 800188e:	e000      	b.n	8001892 <ETH_SetMACConfig+0x11a>
 8001890:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001892:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800189a:	2a01      	cmp	r2, #1
 800189c:	d101      	bne.n	80018a2 <ETH_SetMACConfig+0x12a>
 800189e:	2202      	movs	r2, #2
 80018a0:	e000      	b.n	80018a4 <ETH_SetMACConfig+0x12c>
 80018a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018a4:	4313      	orrs	r3, r2
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fd15 	bl	80012ec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	ff20810f 	.word	0xff20810f

080018d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <ETH_SetDMAConfig+0x110>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	7b1b      	ldrb	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <ETH_SetDMAConfig+0x2c>
 80018fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001902:	e000      	b.n	8001906 <ETH_SetDMAConfig+0x2e>
 8001904:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	7b5b      	ldrb	r3, [r3, #13]
 800190a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800190c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	7f52      	ldrb	r2, [r2, #29]
 8001912:	2a00      	cmp	r2, #0
 8001914:	d102      	bne.n	800191c <ETH_SetDMAConfig+0x44>
 8001916:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800191a:	e000      	b.n	800191e <ETH_SetDMAConfig+0x46>
 800191c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800191e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7b9b      	ldrb	r3, [r3, #14]
 8001924:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001926:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800192c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	7f1b      	ldrb	r3, [r3, #28]
 8001932:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001934:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	7f9b      	ldrb	r3, [r3, #30]
 800193a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800193c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001942:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800194a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800194c:	4313      	orrs	r3, r2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195c:	461a      	mov	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff fcbc 	bl	80012ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197c:	461a      	mov	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800198c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001992:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001998:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80019a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff fc8d 	bl	80012ec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	f8de3f23 	.word	0xf8de3f23

080019ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0a6      	sub	sp, #152	; 0x98
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fe86 	bl	8001778 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff08 	bl	80018d8 <ETH_SetDMAConfig>
}
 8001ac8:	bf00      	nop
 8001aca:	3798      	adds	r7, #152	; 0x98
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	3204      	adds	r2, #4
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <ETH_MACAddressConfig+0x68>)
 8001af2:	4413      	add	r3, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3303      	adds	r3, #3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	061a      	lsls	r2, r3, #24
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3302      	adds	r3, #2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4313      	orrs	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <ETH_MACAddressConfig+0x6c>)
 8001b22:	4413      	add	r3, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	6013      	str	r3, [r2, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40028040 	.word	0x40028040
 8001b3c:	40028044 	.word	0x40028044

08001b40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e03e      	b.n	8001bcc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68d9      	ldr	r1, [r3, #12]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	3206      	adds	r2, #6
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d80c      	bhi.n	8001bb0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68d9      	ldr	r1, [r3, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	e004      	b.n	8001bba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d9bd      	bls.n	8001b4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e046      	b.n	8001c8e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c44:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	3212      	adds	r2, #18
 8001c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d80c      	bhi.n	8001c7e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6919      	ldr	r1, [r3, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	e004      	b.n	8001c88 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d9b5      	bls.n	8001c00 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbe:	60da      	str	r2, [r3, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e177      	b.n	8001fd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8166 	bne.w	8001fd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80c0 	beq.w	8001fd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a61      	ldr	r2, [pc, #388]	; (8001ff4 <HAL_GPIO_Init+0x328>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_GPIO_Init+0x32c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d037      	beq.n	8001f0a <HAL_GPIO_Init+0x23e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_GPIO_Init+0x330>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d031      	beq.n	8001f06 <HAL_GPIO_Init+0x23a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d02b      	beq.n	8001f02 <HAL_GPIO_Init+0x236>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a55      	ldr	r2, [pc, #340]	; (8002004 <HAL_GPIO_Init+0x338>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x232>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a54      	ldr	r2, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x33c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x22e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a53      	ldr	r2, [pc, #332]	; (800200c <HAL_GPIO_Init+0x340>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x22a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x344>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x226>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a51      	ldr	r2, [pc, #324]	; (8002014 <HAL_GPIO_Init+0x348>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x222>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_GPIO_Init+0x34c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x21e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4f      	ldr	r2, [pc, #316]	; (800201c <HAL_GPIO_Init+0x350>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001ee2:	2309      	movs	r3, #9
 8001ee4:	e012      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	e010      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001eea:	2308      	movs	r3, #8
 8001eec:	e00e      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e00c      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	e00a      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	e008      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e004      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	f002 0203 	and.w	r2, r2, #3
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4093      	lsls	r3, r2
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1c:	4935      	ldr	r1, [pc, #212]	; (8001ff4 <HAL_GPIO_Init+0x328>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4e:	4a34      	ldr	r2, [pc, #208]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f54:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f78:	4a29      	ldr	r2, [pc, #164]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_GPIO_Init+0x354>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	f67f ae84 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40021400 	.word	0x40021400
 8002010:	40021800 	.word	0x40021800
 8002014:	40021c00 	.word	0x40021c00
 8002018:	40022000 	.word	0x40022000
 800201c:	40022400 	.word	0x40022400
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002058:	b08f      	sub	sp, #60	; 0x3c
 800205a:	af0a      	add	r7, sp, #40	; 0x28
 800205c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e10f      	b.n	8002288 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fec2 	bl	8000e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2203      	movs	r2, #3
 800208c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 ffcd 	bl	8004046 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	687e      	ldr	r6, [r7, #4]
 80020b4:	466d      	mov	r5, sp
 80020b6:	f106 0410 	add.w	r4, r6, #16
 80020ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ca:	1d33      	adds	r3, r6, #4
 80020cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ce:	6838      	ldr	r0, [r7, #0]
 80020d0:	f001 ff58 	bl	8003f84 <USB_CoreInit>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0d0      	b.n	8002288 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 ffbb 	bl	8004068 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e04a      	b.n	800218e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	333d      	adds	r3, #61	; 0x3d
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	333c      	adds	r3, #60	; 0x3c
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	b298      	uxth	r0, r3
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3344      	adds	r3, #68	; 0x44
 8002134:	4602      	mov	r2, r0
 8002136:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3340      	adds	r3, #64	; 0x40
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3348      	adds	r3, #72	; 0x48
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	334c      	adds	r3, #76	; 0x4c
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3354      	adds	r3, #84	; 0x54
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	3301      	adds	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d3af      	bcc.n	80020f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e044      	b.n	8002228 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	3301      	adds	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d3b5      	bcc.n	800219e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	687e      	ldr	r6, [r7, #4]
 800223a:	466d      	mov	r5, sp
 800223c:	f106 0410 	add.w	r4, r6, #16
 8002240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002250:	1d33      	adds	r3, r6, #4
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f001 ff53 	bl	8004100 <USB_DevInit>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e00d      	b.n	8002288 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 f91e 	bl	80044c2 <USB_DevDisconnect>

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e267      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d075      	beq.n	800239a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4b85      	ldr	r3, [pc, #532]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d112      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b82      	ldr	r3, [pc, #520]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05b      	beq.n	8002398 <HAL_RCC_OscConfig+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e242      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x74>
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6f      	ldr	r2, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6c      	ldr	r2, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002328:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a68      	ldr	r2, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b66      	ldr	r3, [pc, #408]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe ffc4 	bl	80012d4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe ffc0 	bl	80012d4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e207      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xc0>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe ffb0 	bl	80012d4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe ffac 	bl	80012d4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1f3      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0xe8>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1c7      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4937      	ldr	r1, [pc, #220]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_RCC_OscConfig+0x244>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe ff65 	bl	80012d4 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe ff61 	bl	80012d4 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1a8      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4925      	ldr	r1, [pc, #148]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x244>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe ff44 	bl	80012d4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe ff40 	bl	80012d4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e187      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d036      	beq.n	80024e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCC_OscConfig+0x248>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe ff24 	bl	80012d4 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe ff20 	bl	80012d4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e167      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x240>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x200>
 80024ae:	e01b      	b.n	80024e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_OscConfig+0x248>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe ff0d 	bl	80012d4 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e00e      	b.n	80024dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe ff09 	bl	80012d4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d907      	bls.n	80024dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e150      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ea      	bne.n	80024be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8097 	beq.w	8002624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b7d      	ldr	r3, [pc, #500]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a7c      	ldr	r2, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b7a      	ldr	r3, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b77      	ldr	r3, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b74      	ldr	r3, [pc, #464]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a73      	ldr	r2, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fec9 	bl	80012d4 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fec5 	bl	80012d4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e10c      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x474>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x2ea>
 800256c:	4b64      	ldr	r3, [pc, #400]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a63      	ldr	r2, [pc, #396]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x324>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x30c>
 8002582:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a5e      	ldr	r2, [pc, #376]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a5b      	ldr	r2, [pc, #364]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0x324>
 800259c:	4b58      	ldr	r3, [pc, #352]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	4b55      	ldr	r3, [pc, #340]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a54      	ldr	r2, [pc, #336]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fe8a 	bl	80012d4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fe86 	bl	80012d4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0cb      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	4b49      	ldr	r3, [pc, #292]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ee      	beq.n	80025c4 <HAL_RCC_OscConfig+0x334>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e8:	f7fe fe74 	bl	80012d4 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fe70 	bl	80012d4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0b5      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a38      	ldr	r2, [pc, #224]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a1 	beq.w	8002770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262e:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d05c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d141      	bne.n	80026c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_OscConfig+0x478>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fe44 	bl	80012d4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fe40 	bl	80012d4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e087      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	019b      	lsls	r3, r3, #6
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	491b      	ldr	r1, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x478>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fe19 	bl	80012d4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fe15 	bl	80012d4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e05c      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x416>
 80026c4:	e054      	b.n	8002770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_RCC_OscConfig+0x478>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fe02 	bl	80012d4 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fdfe 	bl	80012d4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e045      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_OscConfig+0x470>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x444>
 80026f2:	e03d      	b.n	8002770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e038      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
 8002700:	40023800 	.word	0x40023800
 8002704:	40007000 	.word	0x40007000
 8002708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x4ec>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d028      	beq.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d121      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d11a      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002744:	4293      	cmp	r3, r2
 8002746:	d111      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	3b01      	subs	r3, #1
 8002756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0cc      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d90c      	bls.n	80027bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d044      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d119      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	2b03      	cmp	r3, #3
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b3f      	ldr	r3, [pc, #252]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e067      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4934      	ldr	r1, [pc, #208]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fd30 	bl	80012d4 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fd2c 	bl	80012d4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e04f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d20c      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fc90 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00
 800293c:	40023800 	.word	0x40023800
 8002940:	0800576c 	.word	0x0800576c
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002950:	b094      	sub	sp, #80	; 0x50
 8002952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
 8002958:	2300      	movs	r3, #0
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	2300      	movs	r3, #0
 800295e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002964:	4b79      	ldr	r3, [pc, #484]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d00d      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x40>
 8002970:	2b08      	cmp	r3, #8
 8002972:	f200 80e1 	bhi.w	8002b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x34>
 800297a:	2b04      	cmp	r3, #4
 800297c:	d003      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x3a>
 800297e:	e0db      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002984:	e0db      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800298a:	e0d8      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800298c:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002994:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002996:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a2:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	2200      	movs	r2, #0
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
 80029b6:	2300      	movs	r3, #0
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029be:	4622      	mov	r2, r4
 80029c0:	462b      	mov	r3, r5
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	0159      	lsls	r1, r3, #5
 80029cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d0:	0150      	lsls	r0, r2, #5
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4621      	mov	r1, r4
 80029d8:	1a51      	subs	r1, r2, r1
 80029da:	6139      	str	r1, [r7, #16]
 80029dc:	4629      	mov	r1, r5
 80029de:	eb63 0301 	sbc.w	r3, r3, r1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f0:	4659      	mov	r1, fp
 80029f2:	018b      	lsls	r3, r1, #6
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029fa:	4651      	mov	r1, sl
 80029fc:	018a      	lsls	r2, r1, #6
 80029fe:	4651      	mov	r1, sl
 8002a00:	ebb2 0801 	subs.w	r8, r2, r1
 8002a04:	4659      	mov	r1, fp
 8002a06:	eb63 0901 	sbc.w	r9, r3, r1
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4699      	mov	r9, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	eb18 0303 	adds.w	r3, r8, r3
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	462b      	mov	r3, r5
 8002a2c:	eb49 0303 	adc.w	r3, r9, r3
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a3e:	4629      	mov	r1, r5
 8002a40:	024b      	lsls	r3, r1, #9
 8002a42:	4621      	mov	r1, r4
 8002a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a48:	4621      	mov	r1, r4
 8002a4a:	024a      	lsls	r2, r1, #9
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a52:	2200      	movs	r2, #0
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a5c:	f7fd fc18 	bl	8000290 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a68:	e058      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	2200      	movs	r2, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	4611      	mov	r1, r2
 8002a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	0159      	lsls	r1, r3, #5
 8002a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a96:	0150      	lsls	r0, r2, #5
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002abc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	00eb      	lsls	r3, r5, #3
 8002ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad2:	00e2      	lsls	r2, r4, #3
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	4643      	mov	r3, r8
 8002ada:	18e3      	adds	r3, r4, r3
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	464b      	mov	r3, r9
 8002ae0:	eb45 0303 	adc.w	r3, r5, r3
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002af2:	4629      	mov	r1, r5
 8002af4:	028b      	lsls	r3, r1, #10
 8002af6:	4621      	mov	r1, r4
 8002af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002afc:	4621      	mov	r1, r4
 8002afe:	028a      	lsls	r2, r1, #10
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b06:	2200      	movs	r2, #0
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	61fa      	str	r2, [r7, #28]
 8002b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b10:	f7fd fbbe 	bl	8000290 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	3301      	adds	r3, #1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3750      	adds	r7, #80	; 0x50
 8002b44:	46bd      	mov	sp, r7
 8002b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	007a1200 	.word	0x007a1200

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0a9b      	lsrs	r3, r3, #10
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4903      	ldr	r1, [pc, #12]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	0800577c 	.word	0x0800577c

08002b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b9c:	f7ff ffdc 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0b5b      	lsrs	r3, r3, #13
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	0800577c 	.word	0x0800577c

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e041      	b.n	8002c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe f87e 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 f89e 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e04e      	b.n	8002d16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d022      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x80>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca2:	d01d      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x80>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d018      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x80>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x80>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x80>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x80>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x80>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d010      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	e007      	b.n	8002d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800
 8002d30:	40000c00 	.word	0x40000c00
 8002d34:	40010400 	.word	0x40010400
 8002d38:	40014000 	.word	0x40014000
 8002d3c:	40001800 	.word	0x40001800

08002d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <TIM_Base_SetConfig+0x114>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d00f      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <TIM_Base_SetConfig+0x118>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3b      	ldr	r2, [pc, #236]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3a      	ldr	r2, [pc, #232]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <TIM_Base_SetConfig+0x114>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d027      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <TIM_Base_SetConfig+0x118>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d023      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2b      	ldr	r2, [pc, #172]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01f      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01b      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d017      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00f      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <TIM_Base_SetConfig+0x130>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00b      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <TIM_Base_SetConfig+0x134>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <TIM_Base_SetConfig+0x138>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <TIM_Base_SetConfig+0x13c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d108      	bne.n	8002e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <TIM_Base_SetConfig+0x114>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_Base_SetConfig+0xf8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d103      	bne.n	8002e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	615a      	str	r2, [r3, #20]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40010400 	.word	0x40010400
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40014400 	.word	0x40014400
 8002e70:	40014800 	.word	0x40014800
 8002e74:	40001800 	.word	0x40001800
 8002e78:	40001c00 	.word	0x40001c00
 8002e7c:	40002000 	.word	0x40002000

08002e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e03f      	b.n	8002f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fd ff40 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fde9 	bl	8003a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08a      	sub	sp, #40	; 0x28
 8002f1e:	af02      	add	r7, sp, #8
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d17c      	bne.n	8003034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_UART_Transmit+0x2c>
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e075      	b.n	8003036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_UART_Transmit+0x3e>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e06e      	b.n	8003036 <HAL_UART_Transmit+0x11c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2221      	movs	r2, #33	; 0x21
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe f9b1 	bl	80012d4 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f88:	d108      	bne.n	8002f9c <HAL_UART_Transmit+0x82>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	e003      	b.n	8002fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fac:	e02a      	b.n	8003004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fb29 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e036      	b.n	8003036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	e007      	b.n	8002ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1cf      	bne.n	8002fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	2140      	movs	r1, #64	; 0x40
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 faf9 	bl	8003610 <UART_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e006      	b.n	8003036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	4613      	mov	r3, r2
 800304a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b20      	cmp	r3, #32
 8003056:	d11d      	bne.n	8003094 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_UART_Receive_IT+0x26>
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e016      	b.n	8003096 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_UART_Receive_IT+0x38>
 8003072:	2302      	movs	r3, #2
 8003074:	e00f      	b.n	8003096 <HAL_UART_Receive_IT+0x58>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	461a      	mov	r2, r3
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fb2e 	bl	80036ec <UART_Start_Receive_IT>
 8003090:	4603      	mov	r3, r0
 8003092:	e000      	b.n	8003096 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b0ba      	sub	sp, #232	; 0xe8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_UART_IRQHandler+0x66>
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fc11 	bl	8003926 <UART_Receive_IT>
      return;
 8003104:	e256      	b.n	80035b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80de 	beq.w	80032cc <HAL_UART_IRQHandler+0x22c>
 8003110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800311c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003120:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80d1 	beq.w	80032cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_UART_IRQHandler+0xae>
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_UART_IRQHandler+0xd2>
 800315a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f043 0202 	orr.w	r2, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_UART_IRQHandler+0xf6>
 800317e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0204 	orr.w	r2, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d011      	beq.n	80031c6 <HAL_UART_IRQHandler+0x126>
 80031a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d105      	bne.n	80031ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0208 	orr.w	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 81ed 	beq.w	80035aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_UART_IRQHandler+0x14e>
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fb9c 	bl	8003926 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <HAL_UART_IRQHandler+0x17a>
 8003212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04f      	beq.n	80032ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 faa4 	bl	8003768 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d141      	bne.n	80032b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3314      	adds	r3, #20
 8003234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3314      	adds	r3, #20
 8003256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800325a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800325e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1d9      	bne.n	800322e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	2b00      	cmp	r3, #0
 8003280:	d013      	beq.n	80032aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	4a7d      	ldr	r2, [pc, #500]	; (800347c <HAL_UART_IRQHandler+0x3dc>)
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe f9d1 	bl	8001636 <HAL_DMA_Abort_IT>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a4:	4610      	mov	r0, r2
 80032a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	e00e      	b.n	80032c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f99a 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	e00a      	b.n	80032c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f996 	bl	80035e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e006      	b.n	80032c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f992 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032c6:	e170      	b.n	80035aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	bf00      	nop
    return;
 80032ca:	e16e      	b.n	80035aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	f040 814a 	bne.w	800356a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8143 	beq.w	800356a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 813c 	beq.w	800356a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	f040 80b4 	bne.w	8003480 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003324:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8140 	beq.w	80035ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003336:	429a      	cmp	r2, r3
 8003338:	f080 8139 	bcs.w	80035ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003342:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334e:	f000 8088 	beq.w	8003462 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800336c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800337e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800338a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1d9      	bne.n	8003352 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3314      	adds	r3, #20
 80033a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e1      	bne.n	800339e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800340c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e3      	bne.n	80033da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003432:	f023 0310 	bic.w	r3, r3, #16
 8003436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003444:	65ba      	str	r2, [r7, #88]	; 0x58
 8003446:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800344a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e3      	bne.n	8003420 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe f87a 	bl	8001556 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800346a:	b29b      	uxth	r3, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	b29b      	uxth	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8c0 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003478:	e099      	b.n	80035ae <HAL_UART_IRQHandler+0x50e>
 800347a:	bf00      	nop
 800347c:	0800382f 	.word	0x0800382f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 808b 	beq.w	80035b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800349c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8086 	beq.w	80035b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034ca:	647a      	str	r2, [r7, #68]	; 0x44
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e3      	bne.n	80034a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3314      	adds	r3, #20
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	623b      	str	r3, [r7, #32]
   return(result);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3314      	adds	r3, #20
 80034fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003502:	633a      	str	r2, [r7, #48]	; 0x30
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e3      	bne.n	80034de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	60fb      	str	r3, [r7, #12]
   return(result);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0310 	bic.w	r3, r3, #16
 800353a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003548:	61fa      	str	r2, [r7, #28]
 800354a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	617b      	str	r3, [r7, #20]
   return(result);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e3      	bne.n	8003524 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800355c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f848 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003568:	e023      	b.n	80035b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_UART_IRQHandler+0x4ea>
 8003576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f967 	bl	8003856 <UART_Transmit_IT>
    return;
 8003588:	e014      	b.n	80035b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00e      	beq.n	80035b4 <HAL_UART_IRQHandler+0x514>
 8003596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9a7 	bl	80038f6 <UART_EndTransmit_IT>
    return;
 80035a8:	e004      	b.n	80035b4 <HAL_UART_IRQHandler+0x514>
    return;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <HAL_UART_IRQHandler+0x514>
      return;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_UART_IRQHandler+0x514>
      return;
 80035b2:	bf00      	nop
  }
}
 80035b4:	37e8      	adds	r7, #232	; 0xe8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop

080035bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b090      	sub	sp, #64	; 0x40
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	e050      	b.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d04c      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x30>
 8003630:	f7fd fe50 	bl	80012d4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800363c:	429a      	cmp	r2, r3
 800363e:	d241      	bcs.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003660:	637a      	str	r2, [r7, #52]	; 0x34
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	613b      	str	r3, [r7, #16]
   return(result);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003694:	623a      	str	r2, [r7, #32]
 8003696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	69f9      	ldr	r1, [r7, #28]
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e00f      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d09f      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3740      	adds	r7, #64	; 0x40
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2222      	movs	r2, #34	; 0x22
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003738:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b095      	sub	sp, #84	; 0x54
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003790:	643a      	str	r2, [r7, #64]	; 0x40
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d119      	bne.n	8003814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	647b      	str	r3, [r7, #68]	; 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003800:	61ba      	str	r2, [r7, #24]
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6979      	ldr	r1, [r7, #20]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	613b      	str	r3, [r7, #16]
   return(result);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003822:	bf00      	nop
 8003824:	3754      	adds	r7, #84	; 0x54
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff fecb 	bl	80035e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b21      	cmp	r3, #33	; 0x21
 8003868:	d13e      	bne.n	80038e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d114      	bne.n	800389e <UART_Transmit_IT+0x48>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d110      	bne.n	800389e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003890:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]
 800389c:	e008      	b.n	80038b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6211      	str	r1, [r2, #32]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4619      	mov	r1, r3
 80038be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10f      	bne.n	80038e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fe50 	bl	80035bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08c      	sub	sp, #48	; 0x30
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b22      	cmp	r3, #34	; 0x22
 8003938:	f040 80ab 	bne.w	8003a92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003944:	d117      	bne.n	8003976 <UART_Receive_IT+0x50>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003964:	b29a      	uxth	r2, r3
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
 8003974:	e026      	b.n	80039c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d007      	beq.n	800399a <UART_Receive_IT+0x74>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <UART_Receive_IT+0x82>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e008      	b.n	80039ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4619      	mov	r1, r3
 80039d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d15a      	bne.n	8003a8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0220 	bic.w	r2, r2, #32
 80039e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d135      	bne.n	8003a84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f023 0310 	bic.w	r3, r3, #16
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	623a      	str	r2, [r7, #32]
 8003a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e5      	bne.n	8003a1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d10a      	bne.n	8003a76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fdbb 	bl	80035f8 <HAL_UARTEx_RxEventCallback>
 8003a82:	e002      	b.n	8003a8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fda3 	bl	80035d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e002      	b.n	8003a94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3730      	adds	r7, #48	; 0x30
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa0:	b0c0      	sub	sp, #256	; 0x100
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	68d9      	ldr	r1, [r3, #12]
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	ea40 0301 	orr.w	r3, r0, r1
 8003ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003af4:	f021 010c 	bic.w	r1, r1, #12
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b02:	430b      	orrs	r3, r1
 8003b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b16:	6999      	ldr	r1, [r3, #24]
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	ea40 0301 	orr.w	r3, r0, r1
 8003b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b8f      	ldr	r3, [pc, #572]	; (8003d68 <UART_SetConfig+0x2cc>)
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d005      	beq.n	8003b3c <UART_SetConfig+0xa0>
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <UART_SetConfig+0x2d0>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d104      	bne.n	8003b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7ff f82c 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8003b40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b44:	e003      	b.n	8003b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b46:	f7ff f813 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	f040 810c 	bne.w	8003d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
 8003b72:	1891      	adds	r1, r2, r2
 8003b74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b76:	415b      	adcs	r3, r3
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b7e:	4621      	mov	r1, r4
 8003b80:	eb12 0801 	adds.w	r8, r2, r1
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb43 0901 	adc.w	r9, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9e:	4690      	mov	r8, r2
 8003ba0:	4699      	mov	r9, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb18 0303 	adds.w	r3, r8, r3
 8003ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bac:	462b      	mov	r3, r5
 8003bae:	eb49 0303 	adc.w	r3, r9, r3
 8003bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bca:	460b      	mov	r3, r1
 8003bcc:	18db      	adds	r3, r3, r3
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	eb42 0303 	adc.w	r3, r2, r3
 8003bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003be0:	f7fc fb56 	bl	8000290 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003bea:	fba3 2302 	umull	r2, r3, r3, r2
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	011c      	lsls	r4, r3, #4
 8003bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	1891      	adds	r1, r2, r2
 8003c0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c14:	4641      	mov	r1, r8
 8003c16:	eb12 0a01 	adds.w	sl, r2, r1
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c34:	4692      	mov	sl, r2
 8003c36:	469b      	mov	fp, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c42:	464b      	mov	r3, r9
 8003c44:	eb4b 0303 	adc.w	r3, fp, r3
 8003c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c60:	460b      	mov	r3, r1
 8003c62:	18db      	adds	r3, r3, r3
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
 8003c66:	4613      	mov	r3, r2
 8003c68:	eb42 0303 	adc.w	r3, r2, r3
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c76:	f7fc fb0b 	bl	8000290 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003c82:	fba3 2301 	umull	r2, r3, r3, r1
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	1acb      	subs	r3, r1, r3
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003c98:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca4:	441c      	add	r4, r3
 8003ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cc8:	4641      	mov	r1, r8
 8003cca:	1851      	adds	r1, r2, r1
 8003ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8003cce:	4649      	mov	r1, r9
 8003cd0:	414b      	adcs	r3, r1
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	00cb      	lsls	r3, r1, #3
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cea:	4651      	mov	r1, sl
 8003cec:	00ca      	lsls	r2, r1, #3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	460a      	mov	r2, r1
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	18db      	adds	r3, r3, r3
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	4613      	mov	r3, r2
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d32:	f7fc faad 	bl	8000290 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	2164      	movs	r1, #100	; 0x64
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	3332      	adds	r3, #50	; 0x32
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <UART_SetConfig+0x2d4>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	f003 0207 	and.w	r2, r3, #7
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4422      	add	r2, r4
 8003d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d64:	e105      	b.n	8003f72 <UART_SetConfig+0x4d6>
 8003d66:	bf00      	nop
 8003d68:	40011000 	.word	0x40011000
 8003d6c:	40011400 	.word	0x40011400
 8003d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d86:	4642      	mov	r2, r8
 8003d88:	464b      	mov	r3, r9
 8003d8a:	1891      	adds	r1, r2, r2
 8003d8c:	6239      	str	r1, [r7, #32]
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d96:	4641      	mov	r1, r8
 8003d98:	1854      	adds	r4, r2, r1
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	eb43 0501 	adc.w	r5, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	00eb      	lsls	r3, r5, #3
 8003daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dae:	00e2      	lsls	r2, r4, #3
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	4643      	mov	r3, r8
 8003db6:	18e3      	adds	r3, r4, r3
 8003db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	eb45 0303 	adc.w	r3, r5, r3
 8003dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003de2:	4629      	mov	r1, r5
 8003de4:	008b      	lsls	r3, r1, #2
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dec:	4621      	mov	r1, r4
 8003dee:	008a      	lsls	r2, r1, #2
 8003df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003df4:	f7fc fa4c 	bl	8000290 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	011c      	lsls	r4, r3, #4
 8003e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e18:	4642      	mov	r2, r8
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	61b9      	str	r1, [r7, #24]
 8003e20:	415b      	adcs	r3, r3
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e28:	4641      	mov	r1, r8
 8003e2a:	1851      	adds	r1, r2, r1
 8003e2c:	6139      	str	r1, [r7, #16]
 8003e2e:	4649      	mov	r1, r9
 8003e30:	414b      	adcs	r3, r1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e40:	4659      	mov	r1, fp
 8003e42:	00cb      	lsls	r3, r1, #3
 8003e44:	4651      	mov	r1, sl
 8003e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	00ca      	lsls	r2, r1, #3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	4642      	mov	r2, r8
 8003e56:	189b      	adds	r3, r3, r2
 8003e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	460a      	mov	r2, r1
 8003e60:	eb42 0303 	adc.w	r3, r2, r3
 8003e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e80:	4649      	mov	r1, r9
 8003e82:	008b      	lsls	r3, r1, #2
 8003e84:	4641      	mov	r1, r8
 8003e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	008a      	lsls	r2, r1, #2
 8003e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e92:	f7fc f9fd 	bl	8000290 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4b39      	ldr	r3, [pc, #228]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2164      	movs	r1, #100	; 0x64
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	3332      	adds	r3, #50	; 0x32
 8003eae:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eba:	441c      	add	r4, r3
 8003ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ec4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ec6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eca:	4642      	mov	r2, r8
 8003ecc:	464b      	mov	r3, r9
 8003ece:	1891      	adds	r1, r2, r2
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eda:	4641      	mov	r1, r8
 8003edc:	1851      	adds	r1, r2, r1
 8003ede:	6039      	str	r1, [r7, #0]
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	414b      	adcs	r3, r1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	00cb      	lsls	r3, r1, #3
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efc:	4651      	mov	r1, sl
 8003efe:	00ca      	lsls	r2, r1, #3
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	4603      	mov	r3, r0
 8003f06:	4642      	mov	r2, r8
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	460a      	mov	r2, r1
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f20:	667a      	str	r2, [r7, #100]	; 0x64
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f2e:	4649      	mov	r1, r9
 8003f30:	008b      	lsls	r3, r1, #2
 8003f32:	4641      	mov	r1, r8
 8003f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f38:	4641      	mov	r1, r8
 8003f3a:	008a      	lsls	r2, r1, #2
 8003f3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f40:	f7fc f9a6 	bl	8000290 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2164      	movs	r1, #100	; 0x64
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <UART_SetConfig+0x4e4>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4422      	add	r2, r4
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	bf00      	nop
 8003f74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	51eb851f 	.word	0x51eb851f

08003f84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f84:	b084      	sub	sp, #16
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	f107 001c 	add.w	r0, r7, #28
 8003f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d122      	bne.n	8003fe2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d105      	bne.n	8003fd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 faa2 	bl	8004520 <USB_CoreReset>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	e01a      	b.n	8004018 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa96 	bl	8004520 <USB_CoreReset>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
 800400a:	e005      	b.n	8004018 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10b      	bne.n	8004036 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f043 0206 	orr.w	r2, r3, #6
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004042:	b004      	add	sp, #16
 8004044:	4770      	bx	lr

08004046 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d115      	bne.n	80040b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004096:	2001      	movs	r0, #1
 8004098:	f7fd f928 	bl	80012ec <HAL_Delay>
      ms++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa2e 	bl	8004504 <USB_GetMode>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d01e      	beq.n	80040ec <USB_SetCurrentMode+0x84>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b31      	cmp	r3, #49	; 0x31
 80040b2:	d9f0      	bls.n	8004096 <USB_SetCurrentMode+0x2e>
 80040b4:	e01a      	b.n	80040ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d115      	bne.n	80040e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040c8:	2001      	movs	r0, #1
 80040ca:	f7fd f90f 	bl	80012ec <HAL_Delay>
      ms++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fa15 	bl	8004504 <USB_GetMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <USB_SetCurrentMode+0x84>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b31      	cmp	r3, #49	; 0x31
 80040e4:	d9f0      	bls.n	80040c8 <USB_SetCurrentMode+0x60>
 80040e6:	e001      	b.n	80040ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e005      	b.n	80040f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b32      	cmp	r3, #50	; 0x32
 80040f0:	d101      	bne.n	80040f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004100:	b084      	sub	sp, #16
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800410e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e009      	b.n	8004134 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3340      	adds	r3, #64	; 0x40
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3301      	adds	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0e      	cmp	r3, #14
 8004138:	d9f2      	bls.n	8004120 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11c      	bne.n	800417a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414e:	f043 0302 	orr.w	r3, r3, #2
 8004152:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
 8004178:	e00b      	b.n	8004192 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004198:	461a      	mov	r2, r3
 800419a:	2300      	movs	r3, #0
 800419c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	4619      	mov	r1, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	461a      	mov	r2, r3
 80041ae:	680b      	ldr	r3, [r1, #0]
 80041b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f965 	bl	8004490 <USB_SetDevSpeed>
 80041c6:	e008      	b.n	80041da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041c8:	2101      	movs	r1, #1
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f960 	bl	8004490 <USB_SetDevSpeed>
 80041d0:	e003      	b.n	80041da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041d2:	2103      	movs	r1, #3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f95b 	bl	8004490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041da:	2110      	movs	r1, #16
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8f3 	bl	80043c8 <USB_FlushTxFifo>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f91f 	bl	8004430 <USB_FlushRxFifo>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	461a      	mov	r2, r3
 800421c:	2300      	movs	r3, #0
 800421e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e043      	b.n	80042ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800423c:	d118      	bne.n	8004270 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	461a      	mov	r2, r3
 8004252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e013      	b.n	8004282 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	461a      	mov	r2, r3
 8004268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e008      	b.n	8004282 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	461a      	mov	r2, r3
 80042a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3301      	adds	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d3b7      	bcc.n	8004226 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e043      	b.n	8004344 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d2:	d118      	bne.n	8004306 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	461a      	mov	r2, r3
 80042e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e013      	b.n	8004318 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e008      	b.n	8004318 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	2300      	movs	r3, #0
 8004328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800433c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3301      	adds	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	429a      	cmp	r2, r3
 800434a:	d3b7      	bcc.n	80042bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800436c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <USB_DevInit+0x2c4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800438c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f043 0208 	orr.w	r2, r3, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c0:	b004      	add	sp, #16
 80043c2:	4770      	bx	lr
 80043c4:	803c3800 	.word	0x803c3800

080043c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a13      	ldr	r2, [pc, #76]	; (800442c <USB_FlushTxFifo+0x64>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e01b      	b.n	8004420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	daf2      	bge.n	80043d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <USB_FlushTxFifo+0x64>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e006      	b.n	8004420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d0f0      	beq.n	8004400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	00030d40 	.word	0x00030d40

08004430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a11      	ldr	r2, [pc, #68]	; (800448c <USB_FlushRxFifo+0x5c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e018      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	daf2      	bge.n	800443c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2210      	movs	r2, #16
 800445e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <USB_FlushRxFifo+0x5c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e006      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d0f0      	beq.n	8004460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	00030d40 	.word	0x00030d40

08004490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044dc:	f023 0303 	bic.w	r3, r3, #3
 80044e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0301 	and.w	r3, r3, #1
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a13      	ldr	r2, [pc, #76]	; (8004584 <USB_CoreReset+0x64>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e01b      	b.n	8004576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	daf2      	bge.n	800452c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3301      	adds	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <USB_CoreReset+0x64>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e006      	b.n	8004576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d0f0      	beq.n	8004556 <USB_CoreReset+0x36>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	00030d40 	.word	0x00030d40

08004588 <__errno>:
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <__errno+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	2000000c 	.word	0x2000000c

08004594 <__libc_init_array>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4d0d      	ldr	r5, [pc, #52]	; (80045cc <__libc_init_array+0x38>)
 8004598:	4c0d      	ldr	r4, [pc, #52]	; (80045d0 <__libc_init_array+0x3c>)
 800459a:	1b64      	subs	r4, r4, r5
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	2600      	movs	r6, #0
 80045a0:	42a6      	cmp	r6, r4
 80045a2:	d109      	bne.n	80045b8 <__libc_init_array+0x24>
 80045a4:	4d0b      	ldr	r5, [pc, #44]	; (80045d4 <__libc_init_array+0x40>)
 80045a6:	4c0c      	ldr	r4, [pc, #48]	; (80045d8 <__libc_init_array+0x44>)
 80045a8:	f001 f824 	bl	80055f4 <_init>
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	2600      	movs	r6, #0
 80045b2:	42a6      	cmp	r6, r4
 80045b4:	d105      	bne.n	80045c2 <__libc_init_array+0x2e>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045bc:	4798      	blx	r3
 80045be:	3601      	adds	r6, #1
 80045c0:	e7ee      	b.n	80045a0 <__libc_init_array+0xc>
 80045c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c6:	4798      	blx	r3
 80045c8:	3601      	adds	r6, #1
 80045ca:	e7f2      	b.n	80045b2 <__libc_init_array+0x1e>
 80045cc:	08005824 	.word	0x08005824
 80045d0:	08005824 	.word	0x08005824
 80045d4:	08005824 	.word	0x08005824
 80045d8:	08005828 	.word	0x08005828

080045dc <memset>:
 80045dc:	4402      	add	r2, r0
 80045de:	4603      	mov	r3, r0
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d100      	bne.n	80045e6 <memset+0xa>
 80045e4:	4770      	bx	lr
 80045e6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ea:	e7f9      	b.n	80045e0 <memset+0x4>

080045ec <iprintf>:
 80045ec:	b40f      	push	{r0, r1, r2, r3}
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <iprintf+0x2c>)
 80045f0:	b513      	push	{r0, r1, r4, lr}
 80045f2:	681c      	ldr	r4, [r3, #0]
 80045f4:	b124      	cbz	r4, 8004600 <iprintf+0x14>
 80045f6:	69a3      	ldr	r3, [r4, #24]
 80045f8:	b913      	cbnz	r3, 8004600 <iprintf+0x14>
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 fa5e 	bl	8004abc <__sinit>
 8004600:	ab05      	add	r3, sp, #20
 8004602:	9a04      	ldr	r2, [sp, #16]
 8004604:	68a1      	ldr	r1, [r4, #8]
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	4620      	mov	r0, r4
 800460a:	f000 fc67 	bl	8004edc <_vfiprintf_r>
 800460e:	b002      	add	sp, #8
 8004610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004614:	b004      	add	sp, #16
 8004616:	4770      	bx	lr
 8004618:	2000000c 	.word	0x2000000c

0800461c <_puts_r>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	460e      	mov	r6, r1
 8004620:	4605      	mov	r5, r0
 8004622:	b118      	cbz	r0, 800462c <_puts_r+0x10>
 8004624:	6983      	ldr	r3, [r0, #24]
 8004626:	b90b      	cbnz	r3, 800462c <_puts_r+0x10>
 8004628:	f000 fa48 	bl	8004abc <__sinit>
 800462c:	69ab      	ldr	r3, [r5, #24]
 800462e:	68ac      	ldr	r4, [r5, #8]
 8004630:	b913      	cbnz	r3, 8004638 <_puts_r+0x1c>
 8004632:	4628      	mov	r0, r5
 8004634:	f000 fa42 	bl	8004abc <__sinit>
 8004638:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <_puts_r+0xd0>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d120      	bne.n	8004680 <_puts_r+0x64>
 800463e:	686c      	ldr	r4, [r5, #4]
 8004640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004642:	07db      	lsls	r3, r3, #31
 8004644:	d405      	bmi.n	8004652 <_puts_r+0x36>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	0598      	lsls	r0, r3, #22
 800464a:	d402      	bmi.n	8004652 <_puts_r+0x36>
 800464c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800464e:	f000 fad3 	bl	8004bf8 <__retarget_lock_acquire_recursive>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	0719      	lsls	r1, r3, #28
 8004656:	d51d      	bpl.n	8004694 <_puts_r+0x78>
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	b1db      	cbz	r3, 8004694 <_puts_r+0x78>
 800465c:	3e01      	subs	r6, #1
 800465e:	68a3      	ldr	r3, [r4, #8]
 8004660:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004664:	3b01      	subs	r3, #1
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	bb39      	cbnz	r1, 80046ba <_puts_r+0x9e>
 800466a:	2b00      	cmp	r3, #0
 800466c:	da38      	bge.n	80046e0 <_puts_r+0xc4>
 800466e:	4622      	mov	r2, r4
 8004670:	210a      	movs	r1, #10
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f848 	bl	8004708 <__swbuf_r>
 8004678:	3001      	adds	r0, #1
 800467a:	d011      	beq.n	80046a0 <_puts_r+0x84>
 800467c:	250a      	movs	r5, #10
 800467e:	e011      	b.n	80046a4 <_puts_r+0x88>
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <_puts_r+0xd4>)
 8004682:	429c      	cmp	r4, r3
 8004684:	d101      	bne.n	800468a <_puts_r+0x6e>
 8004686:	68ac      	ldr	r4, [r5, #8]
 8004688:	e7da      	b.n	8004640 <_puts_r+0x24>
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <_puts_r+0xd8>)
 800468c:	429c      	cmp	r4, r3
 800468e:	bf08      	it	eq
 8004690:	68ec      	ldreq	r4, [r5, #12]
 8004692:	e7d5      	b.n	8004640 <_puts_r+0x24>
 8004694:	4621      	mov	r1, r4
 8004696:	4628      	mov	r0, r5
 8004698:	f000 f888 	bl	80047ac <__swsetup_r>
 800469c:	2800      	cmp	r0, #0
 800469e:	d0dd      	beq.n	800465c <_puts_r+0x40>
 80046a0:	f04f 35ff 	mov.w	r5, #4294967295
 80046a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046a6:	07da      	lsls	r2, r3, #31
 80046a8:	d405      	bmi.n	80046b6 <_puts_r+0x9a>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	059b      	lsls	r3, r3, #22
 80046ae:	d402      	bmi.n	80046b6 <_puts_r+0x9a>
 80046b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046b2:	f000 faa2 	bl	8004bfa <__retarget_lock_release_recursive>
 80046b6:	4628      	mov	r0, r5
 80046b8:	bd70      	pop	{r4, r5, r6, pc}
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da04      	bge.n	80046c8 <_puts_r+0xac>
 80046be:	69a2      	ldr	r2, [r4, #24]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	dc06      	bgt.n	80046d2 <_puts_r+0xb6>
 80046c4:	290a      	cmp	r1, #10
 80046c6:	d004      	beq.n	80046d2 <_puts_r+0xb6>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	7019      	strb	r1, [r3, #0]
 80046d0:	e7c5      	b.n	800465e <_puts_r+0x42>
 80046d2:	4622      	mov	r2, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f817 	bl	8004708 <__swbuf_r>
 80046da:	3001      	adds	r0, #1
 80046dc:	d1bf      	bne.n	800465e <_puts_r+0x42>
 80046de:	e7df      	b.n	80046a0 <_puts_r+0x84>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	250a      	movs	r5, #10
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	701d      	strb	r5, [r3, #0]
 80046ea:	e7db      	b.n	80046a4 <_puts_r+0x88>
 80046ec:	080057a8 	.word	0x080057a8
 80046f0:	080057c8 	.word	0x080057c8
 80046f4:	08005788 	.word	0x08005788

080046f8 <puts>:
 80046f8:	4b02      	ldr	r3, [pc, #8]	; (8004704 <puts+0xc>)
 80046fa:	4601      	mov	r1, r0
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	f7ff bf8d 	b.w	800461c <_puts_r>
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c

08004708 <__swbuf_r>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	460e      	mov	r6, r1
 800470c:	4614      	mov	r4, r2
 800470e:	4605      	mov	r5, r0
 8004710:	b118      	cbz	r0, 800471a <__swbuf_r+0x12>
 8004712:	6983      	ldr	r3, [r0, #24]
 8004714:	b90b      	cbnz	r3, 800471a <__swbuf_r+0x12>
 8004716:	f000 f9d1 	bl	8004abc <__sinit>
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <__swbuf_r+0x98>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d12b      	bne.n	8004778 <__swbuf_r+0x70>
 8004720:	686c      	ldr	r4, [r5, #4]
 8004722:	69a3      	ldr	r3, [r4, #24]
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	071a      	lsls	r2, r3, #28
 800472a:	d52f      	bpl.n	800478c <__swbuf_r+0x84>
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	b36b      	cbz	r3, 800478c <__swbuf_r+0x84>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	1ac0      	subs	r0, r0, r3
 8004736:	6963      	ldr	r3, [r4, #20]
 8004738:	b2f6      	uxtb	r6, r6
 800473a:	4283      	cmp	r3, r0
 800473c:	4637      	mov	r7, r6
 800473e:	dc04      	bgt.n	800474a <__swbuf_r+0x42>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f926 	bl	8004994 <_fflush_r>
 8004748:	bb30      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 800474a:	68a3      	ldr	r3, [r4, #8]
 800474c:	3b01      	subs	r3, #1
 800474e:	60a3      	str	r3, [r4, #8]
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	6022      	str	r2, [r4, #0]
 8004756:	701e      	strb	r6, [r3, #0]
 8004758:	6963      	ldr	r3, [r4, #20]
 800475a:	3001      	adds	r0, #1
 800475c:	4283      	cmp	r3, r0
 800475e:	d004      	beq.n	800476a <__swbuf_r+0x62>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d506      	bpl.n	8004774 <__swbuf_r+0x6c>
 8004766:	2e0a      	cmp	r6, #10
 8004768:	d104      	bne.n	8004774 <__swbuf_r+0x6c>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f911 	bl	8004994 <_fflush_r>
 8004772:	b988      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 8004774:	4638      	mov	r0, r7
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <__swbuf_r+0x9c>)
 800477a:	429c      	cmp	r4, r3
 800477c:	d101      	bne.n	8004782 <__swbuf_r+0x7a>
 800477e:	68ac      	ldr	r4, [r5, #8]
 8004780:	e7cf      	b.n	8004722 <__swbuf_r+0x1a>
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <__swbuf_r+0xa0>)
 8004784:	429c      	cmp	r4, r3
 8004786:	bf08      	it	eq
 8004788:	68ec      	ldreq	r4, [r5, #12]
 800478a:	e7ca      	b.n	8004722 <__swbuf_r+0x1a>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 f80c 	bl	80047ac <__swsetup_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d0cb      	beq.n	8004730 <__swbuf_r+0x28>
 8004798:	f04f 37ff 	mov.w	r7, #4294967295
 800479c:	e7ea      	b.n	8004774 <__swbuf_r+0x6c>
 800479e:	bf00      	nop
 80047a0:	080057a8 	.word	0x080057a8
 80047a4:	080057c8 	.word	0x080057c8
 80047a8:	08005788 	.word	0x08005788

080047ac <__swsetup_r>:
 80047ac:	4b32      	ldr	r3, [pc, #200]	; (8004878 <__swsetup_r+0xcc>)
 80047ae:	b570      	push	{r4, r5, r6, lr}
 80047b0:	681d      	ldr	r5, [r3, #0]
 80047b2:	4606      	mov	r6, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	b125      	cbz	r5, 80047c2 <__swsetup_r+0x16>
 80047b8:	69ab      	ldr	r3, [r5, #24]
 80047ba:	b913      	cbnz	r3, 80047c2 <__swsetup_r+0x16>
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 f97d 	bl	8004abc <__sinit>
 80047c2:	4b2e      	ldr	r3, [pc, #184]	; (800487c <__swsetup_r+0xd0>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	d10f      	bne.n	80047e8 <__swsetup_r+0x3c>
 80047c8:	686c      	ldr	r4, [r5, #4]
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d0:	0719      	lsls	r1, r3, #28
 80047d2:	d42c      	bmi.n	800482e <__swsetup_r+0x82>
 80047d4:	06dd      	lsls	r5, r3, #27
 80047d6:	d411      	bmi.n	80047fc <__swsetup_r+0x50>
 80047d8:	2309      	movs	r3, #9
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295
 80047e6:	e03e      	b.n	8004866 <__swsetup_r+0xba>
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <__swsetup_r+0xd4>)
 80047ea:	429c      	cmp	r4, r3
 80047ec:	d101      	bne.n	80047f2 <__swsetup_r+0x46>
 80047ee:	68ac      	ldr	r4, [r5, #8]
 80047f0:	e7eb      	b.n	80047ca <__swsetup_r+0x1e>
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <__swsetup_r+0xd8>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	bf08      	it	eq
 80047f8:	68ec      	ldreq	r4, [r5, #12]
 80047fa:	e7e6      	b.n	80047ca <__swsetup_r+0x1e>
 80047fc:	0758      	lsls	r0, r3, #29
 80047fe:	d512      	bpl.n	8004826 <__swsetup_r+0x7a>
 8004800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004802:	b141      	cbz	r1, 8004816 <__swsetup_r+0x6a>
 8004804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004808:	4299      	cmp	r1, r3
 800480a:	d002      	beq.n	8004812 <__swsetup_r+0x66>
 800480c:	4630      	mov	r0, r6
 800480e:	f000 fa5b 	bl	8004cc8 <_free_r>
 8004812:	2300      	movs	r3, #0
 8004814:	6363      	str	r3, [r4, #52]	; 0x34
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	2300      	movs	r3, #0
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f043 0308 	orr.w	r3, r3, #8
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	b94b      	cbnz	r3, 8004846 <__swsetup_r+0x9a>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d003      	beq.n	8004846 <__swsetup_r+0x9a>
 800483e:	4621      	mov	r1, r4
 8004840:	4630      	mov	r0, r6
 8004842:	f000 fa01 	bl	8004c48 <__smakebuf_r>
 8004846:	89a0      	ldrh	r0, [r4, #12]
 8004848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800484c:	f010 0301 	ands.w	r3, r0, #1
 8004850:	d00a      	beq.n	8004868 <__swsetup_r+0xbc>
 8004852:	2300      	movs	r3, #0
 8004854:	60a3      	str	r3, [r4, #8]
 8004856:	6963      	ldr	r3, [r4, #20]
 8004858:	425b      	negs	r3, r3
 800485a:	61a3      	str	r3, [r4, #24]
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	b943      	cbnz	r3, 8004872 <__swsetup_r+0xc6>
 8004860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004864:	d1ba      	bne.n	80047dc <__swsetup_r+0x30>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	0781      	lsls	r1, r0, #30
 800486a:	bf58      	it	pl
 800486c:	6963      	ldrpl	r3, [r4, #20]
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	e7f4      	b.n	800485c <__swsetup_r+0xb0>
 8004872:	2000      	movs	r0, #0
 8004874:	e7f7      	b.n	8004866 <__swsetup_r+0xba>
 8004876:	bf00      	nop
 8004878:	2000000c 	.word	0x2000000c
 800487c:	080057a8 	.word	0x080057a8
 8004880:	080057c8 	.word	0x080057c8
 8004884:	08005788 	.word	0x08005788

08004888 <__sflush_r>:
 8004888:	898a      	ldrh	r2, [r1, #12]
 800488a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488e:	4605      	mov	r5, r0
 8004890:	0710      	lsls	r0, r2, #28
 8004892:	460c      	mov	r4, r1
 8004894:	d458      	bmi.n	8004948 <__sflush_r+0xc0>
 8004896:	684b      	ldr	r3, [r1, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	dc05      	bgt.n	80048a8 <__sflush_r+0x20>
 800489c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	dc02      	bgt.n	80048a8 <__sflush_r+0x20>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	d0f9      	beq.n	80048a2 <__sflush_r+0x1a>
 80048ae:	2300      	movs	r3, #0
 80048b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048b4:	682f      	ldr	r7, [r5, #0]
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	d032      	beq.n	8004920 <__sflush_r+0x98>
 80048ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	075a      	lsls	r2, r3, #29
 80048c0:	d505      	bpl.n	80048ce <__sflush_r+0x46>
 80048c2:	6863      	ldr	r3, [r4, #4]
 80048c4:	1ac0      	subs	r0, r0, r3
 80048c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048c8:	b10b      	cbz	r3, 80048ce <__sflush_r+0x46>
 80048ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	2300      	movs	r3, #0
 80048d0:	4602      	mov	r2, r0
 80048d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d4:	6a21      	ldr	r1, [r4, #32]
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b0      	blx	r6
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	d106      	bne.n	80048ee <__sflush_r+0x66>
 80048e0:	6829      	ldr	r1, [r5, #0]
 80048e2:	291d      	cmp	r1, #29
 80048e4:	d82c      	bhi.n	8004940 <__sflush_r+0xb8>
 80048e6:	4a2a      	ldr	r2, [pc, #168]	; (8004990 <__sflush_r+0x108>)
 80048e8:	40ca      	lsrs	r2, r1
 80048ea:	07d6      	lsls	r6, r2, #31
 80048ec:	d528      	bpl.n	8004940 <__sflush_r+0xb8>
 80048ee:	2200      	movs	r2, #0
 80048f0:	6062      	str	r2, [r4, #4]
 80048f2:	04d9      	lsls	r1, r3, #19
 80048f4:	6922      	ldr	r2, [r4, #16]
 80048f6:	6022      	str	r2, [r4, #0]
 80048f8:	d504      	bpl.n	8004904 <__sflush_r+0x7c>
 80048fa:	1c42      	adds	r2, r0, #1
 80048fc:	d101      	bne.n	8004902 <__sflush_r+0x7a>
 80048fe:	682b      	ldr	r3, [r5, #0]
 8004900:	b903      	cbnz	r3, 8004904 <__sflush_r+0x7c>
 8004902:	6560      	str	r0, [r4, #84]	; 0x54
 8004904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004906:	602f      	str	r7, [r5, #0]
 8004908:	2900      	cmp	r1, #0
 800490a:	d0ca      	beq.n	80048a2 <__sflush_r+0x1a>
 800490c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004910:	4299      	cmp	r1, r3
 8004912:	d002      	beq.n	800491a <__sflush_r+0x92>
 8004914:	4628      	mov	r0, r5
 8004916:	f000 f9d7 	bl	8004cc8 <_free_r>
 800491a:	2000      	movs	r0, #0
 800491c:	6360      	str	r0, [r4, #52]	; 0x34
 800491e:	e7c1      	b.n	80048a4 <__sflush_r+0x1c>
 8004920:	6a21      	ldr	r1, [r4, #32]
 8004922:	2301      	movs	r3, #1
 8004924:	4628      	mov	r0, r5
 8004926:	47b0      	blx	r6
 8004928:	1c41      	adds	r1, r0, #1
 800492a:	d1c7      	bne.n	80048bc <__sflush_r+0x34>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0c4      	beq.n	80048bc <__sflush_r+0x34>
 8004932:	2b1d      	cmp	r3, #29
 8004934:	d001      	beq.n	800493a <__sflush_r+0xb2>
 8004936:	2b16      	cmp	r3, #22
 8004938:	d101      	bne.n	800493e <__sflush_r+0xb6>
 800493a:	602f      	str	r7, [r5, #0]
 800493c:	e7b1      	b.n	80048a2 <__sflush_r+0x1a>
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	e7ad      	b.n	80048a4 <__sflush_r+0x1c>
 8004948:	690f      	ldr	r7, [r1, #16]
 800494a:	2f00      	cmp	r7, #0
 800494c:	d0a9      	beq.n	80048a2 <__sflush_r+0x1a>
 800494e:	0793      	lsls	r3, r2, #30
 8004950:	680e      	ldr	r6, [r1, #0]
 8004952:	bf08      	it	eq
 8004954:	694b      	ldreq	r3, [r1, #20]
 8004956:	600f      	str	r7, [r1, #0]
 8004958:	bf18      	it	ne
 800495a:	2300      	movne	r3, #0
 800495c:	eba6 0807 	sub.w	r8, r6, r7
 8004960:	608b      	str	r3, [r1, #8]
 8004962:	f1b8 0f00 	cmp.w	r8, #0
 8004966:	dd9c      	ble.n	80048a2 <__sflush_r+0x1a>
 8004968:	6a21      	ldr	r1, [r4, #32]
 800496a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800496c:	4643      	mov	r3, r8
 800496e:	463a      	mov	r2, r7
 8004970:	4628      	mov	r0, r5
 8004972:	47b0      	blx	r6
 8004974:	2800      	cmp	r0, #0
 8004976:	dc06      	bgt.n	8004986 <__sflush_r+0xfe>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	e78e      	b.n	80048a4 <__sflush_r+0x1c>
 8004986:	4407      	add	r7, r0
 8004988:	eba8 0800 	sub.w	r8, r8, r0
 800498c:	e7e9      	b.n	8004962 <__sflush_r+0xda>
 800498e:	bf00      	nop
 8004990:	20400001 	.word	0x20400001

08004994 <_fflush_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	690b      	ldr	r3, [r1, #16]
 8004998:	4605      	mov	r5, r0
 800499a:	460c      	mov	r4, r1
 800499c:	b913      	cbnz	r3, 80049a4 <_fflush_r+0x10>
 800499e:	2500      	movs	r5, #0
 80049a0:	4628      	mov	r0, r5
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	b118      	cbz	r0, 80049ae <_fflush_r+0x1a>
 80049a6:	6983      	ldr	r3, [r0, #24]
 80049a8:	b90b      	cbnz	r3, 80049ae <_fflush_r+0x1a>
 80049aa:	f000 f887 	bl	8004abc <__sinit>
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <_fflush_r+0x6c>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d11b      	bne.n	80049ec <_fflush_r+0x58>
 80049b4:	686c      	ldr	r4, [r5, #4]
 80049b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ef      	beq.n	800499e <_fflush_r+0xa>
 80049be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049c0:	07d0      	lsls	r0, r2, #31
 80049c2:	d404      	bmi.n	80049ce <_fflush_r+0x3a>
 80049c4:	0599      	lsls	r1, r3, #22
 80049c6:	d402      	bmi.n	80049ce <_fflush_r+0x3a>
 80049c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ca:	f000 f915 	bl	8004bf8 <__retarget_lock_acquire_recursive>
 80049ce:	4628      	mov	r0, r5
 80049d0:	4621      	mov	r1, r4
 80049d2:	f7ff ff59 	bl	8004888 <__sflush_r>
 80049d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049d8:	07da      	lsls	r2, r3, #31
 80049da:	4605      	mov	r5, r0
 80049dc:	d4e0      	bmi.n	80049a0 <_fflush_r+0xc>
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	059b      	lsls	r3, r3, #22
 80049e2:	d4dd      	bmi.n	80049a0 <_fflush_r+0xc>
 80049e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e6:	f000 f908 	bl	8004bfa <__retarget_lock_release_recursive>
 80049ea:	e7d9      	b.n	80049a0 <_fflush_r+0xc>
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <_fflush_r+0x70>)
 80049ee:	429c      	cmp	r4, r3
 80049f0:	d101      	bne.n	80049f6 <_fflush_r+0x62>
 80049f2:	68ac      	ldr	r4, [r5, #8]
 80049f4:	e7df      	b.n	80049b6 <_fflush_r+0x22>
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <_fflush_r+0x74>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	bf08      	it	eq
 80049fc:	68ec      	ldreq	r4, [r5, #12]
 80049fe:	e7da      	b.n	80049b6 <_fflush_r+0x22>
 8004a00:	080057a8 	.word	0x080057a8
 8004a04:	080057c8 	.word	0x080057c8
 8004a08:	08005788 	.word	0x08005788

08004a0c <std>:
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	4604      	mov	r4, r0
 8004a12:	e9c0 3300 	strd	r3, r3, [r0]
 8004a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a1a:	6083      	str	r3, [r0, #8]
 8004a1c:	8181      	strh	r1, [r0, #12]
 8004a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a20:	81c2      	strh	r2, [r0, #14]
 8004a22:	6183      	str	r3, [r0, #24]
 8004a24:	4619      	mov	r1, r3
 8004a26:	2208      	movs	r2, #8
 8004a28:	305c      	adds	r0, #92	; 0x5c
 8004a2a:	f7ff fdd7 	bl	80045dc <memset>
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <std+0x38>)
 8004a30:	6263      	str	r3, [r4, #36]	; 0x24
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <std+0x3c>)
 8004a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <std+0x40>)
 8004a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <std+0x44>)
 8004a3c:	6224      	str	r4, [r4, #32]
 8004a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	08005485 	.word	0x08005485
 8004a48:	080054a7 	.word	0x080054a7
 8004a4c:	080054df 	.word	0x080054df
 8004a50:	08005503 	.word	0x08005503

08004a54 <_cleanup_r>:
 8004a54:	4901      	ldr	r1, [pc, #4]	; (8004a5c <_cleanup_r+0x8>)
 8004a56:	f000 b8af 	b.w	8004bb8 <_fwalk_reent>
 8004a5a:	bf00      	nop
 8004a5c:	08004995 	.word	0x08004995

08004a60 <__sfmoreglue>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	2268      	movs	r2, #104	; 0x68
 8004a64:	1e4d      	subs	r5, r1, #1
 8004a66:	4355      	muls	r5, r2
 8004a68:	460e      	mov	r6, r1
 8004a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a6e:	f000 f997 	bl	8004da0 <_malloc_r>
 8004a72:	4604      	mov	r4, r0
 8004a74:	b140      	cbz	r0, 8004a88 <__sfmoreglue+0x28>
 8004a76:	2100      	movs	r1, #0
 8004a78:	e9c0 1600 	strd	r1, r6, [r0]
 8004a7c:	300c      	adds	r0, #12
 8004a7e:	60a0      	str	r0, [r4, #8]
 8004a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a84:	f7ff fdaa 	bl	80045dc <memset>
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}

08004a8c <__sfp_lock_acquire>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__sfp_lock_acquire+0x8>)
 8004a8e:	f000 b8b3 	b.w	8004bf8 <__retarget_lock_acquire_recursive>
 8004a92:	bf00      	nop
 8004a94:	20000865 	.word	0x20000865

08004a98 <__sfp_lock_release>:
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <__sfp_lock_release+0x8>)
 8004a9a:	f000 b8ae 	b.w	8004bfa <__retarget_lock_release_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	20000865 	.word	0x20000865

08004aa4 <__sinit_lock_acquire>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	; (8004aac <__sinit_lock_acquire+0x8>)
 8004aa6:	f000 b8a7 	b.w	8004bf8 <__retarget_lock_acquire_recursive>
 8004aaa:	bf00      	nop
 8004aac:	20000866 	.word	0x20000866

08004ab0 <__sinit_lock_release>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__sinit_lock_release+0x8>)
 8004ab2:	f000 b8a2 	b.w	8004bfa <__retarget_lock_release_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	20000866 	.word	0x20000866

08004abc <__sinit>:
 8004abc:	b510      	push	{r4, lr}
 8004abe:	4604      	mov	r4, r0
 8004ac0:	f7ff fff0 	bl	8004aa4 <__sinit_lock_acquire>
 8004ac4:	69a3      	ldr	r3, [r4, #24]
 8004ac6:	b11b      	cbz	r3, 8004ad0 <__sinit+0x14>
 8004ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004acc:	f7ff bff0 	b.w	8004ab0 <__sinit_lock_release>
 8004ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <__sinit+0x68>)
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <__sinit+0x6c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	bf04      	itt	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	61a3      	streq	r3, [r4, #24]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 f820 	bl	8004b2c <__sfp>
 8004aec:	6060      	str	r0, [r4, #4]
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f81c 	bl	8004b2c <__sfp>
 8004af4:	60a0      	str	r0, [r4, #8]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f818 	bl	8004b2c <__sfp>
 8004afc:	2200      	movs	r2, #0
 8004afe:	60e0      	str	r0, [r4, #12]
 8004b00:	2104      	movs	r1, #4
 8004b02:	6860      	ldr	r0, [r4, #4]
 8004b04:	f7ff ff82 	bl	8004a0c <std>
 8004b08:	68a0      	ldr	r0, [r4, #8]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	2109      	movs	r1, #9
 8004b0e:	f7ff ff7d 	bl	8004a0c <std>
 8004b12:	68e0      	ldr	r0, [r4, #12]
 8004b14:	2202      	movs	r2, #2
 8004b16:	2112      	movs	r1, #18
 8004b18:	f7ff ff78 	bl	8004a0c <std>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	61a3      	str	r3, [r4, #24]
 8004b20:	e7d2      	b.n	8004ac8 <__sinit+0xc>
 8004b22:	bf00      	nop
 8004b24:	08005784 	.word	0x08005784
 8004b28:	08004a55 	.word	0x08004a55

08004b2c <__sfp>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	4607      	mov	r7, r0
 8004b30:	f7ff ffac 	bl	8004a8c <__sfp_lock_acquire>
 8004b34:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <__sfp+0x84>)
 8004b36:	681e      	ldr	r6, [r3, #0]
 8004b38:	69b3      	ldr	r3, [r6, #24]
 8004b3a:	b913      	cbnz	r3, 8004b42 <__sfp+0x16>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f7ff ffbd 	bl	8004abc <__sinit>
 8004b42:	3648      	adds	r6, #72	; 0x48
 8004b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	d503      	bpl.n	8004b54 <__sfp+0x28>
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	b30b      	cbz	r3, 8004b94 <__sfp+0x68>
 8004b50:	6836      	ldr	r6, [r6, #0]
 8004b52:	e7f7      	b.n	8004b44 <__sfp+0x18>
 8004b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b58:	b9d5      	cbnz	r5, 8004b90 <__sfp+0x64>
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <__sfp+0x88>)
 8004b5c:	60e3      	str	r3, [r4, #12]
 8004b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b62:	6665      	str	r5, [r4, #100]	; 0x64
 8004b64:	f000 f847 	bl	8004bf6 <__retarget_lock_init_recursive>
 8004b68:	f7ff ff96 	bl	8004a98 <__sfp_lock_release>
 8004b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b74:	6025      	str	r5, [r4, #0]
 8004b76:	61a5      	str	r5, [r4, #24]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b80:	f7ff fd2c 	bl	80045dc <memset>
 8004b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b90:	3468      	adds	r4, #104	; 0x68
 8004b92:	e7d9      	b.n	8004b48 <__sfp+0x1c>
 8004b94:	2104      	movs	r1, #4
 8004b96:	4638      	mov	r0, r7
 8004b98:	f7ff ff62 	bl	8004a60 <__sfmoreglue>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	6030      	str	r0, [r6, #0]
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d1d5      	bne.n	8004b50 <__sfp+0x24>
 8004ba4:	f7ff ff78 	bl	8004a98 <__sfp_lock_release>
 8004ba8:	230c      	movs	r3, #12
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	e7ee      	b.n	8004b8c <__sfp+0x60>
 8004bae:	bf00      	nop
 8004bb0:	08005784 	.word	0x08005784
 8004bb4:	ffff0001 	.word	0xffff0001

08004bb8 <_fwalk_reent>:
 8004bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	4688      	mov	r8, r1
 8004bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bc4:	2700      	movs	r7, #0
 8004bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bca:	f1b9 0901 	subs.w	r9, r9, #1
 8004bce:	d505      	bpl.n	8004bdc <_fwalk_reent+0x24>
 8004bd0:	6824      	ldr	r4, [r4, #0]
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	d1f7      	bne.n	8004bc6 <_fwalk_reent+0xe>
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bdc:	89ab      	ldrh	r3, [r5, #12]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d907      	bls.n	8004bf2 <_fwalk_reent+0x3a>
 8004be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004be6:	3301      	adds	r3, #1
 8004be8:	d003      	beq.n	8004bf2 <_fwalk_reent+0x3a>
 8004bea:	4629      	mov	r1, r5
 8004bec:	4630      	mov	r0, r6
 8004bee:	47c0      	blx	r8
 8004bf0:	4307      	orrs	r7, r0
 8004bf2:	3568      	adds	r5, #104	; 0x68
 8004bf4:	e7e9      	b.n	8004bca <_fwalk_reent+0x12>

08004bf6 <__retarget_lock_init_recursive>:
 8004bf6:	4770      	bx	lr

08004bf8 <__retarget_lock_acquire_recursive>:
 8004bf8:	4770      	bx	lr

08004bfa <__retarget_lock_release_recursive>:
 8004bfa:	4770      	bx	lr

08004bfc <__swhatbuf_r>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	460e      	mov	r6, r1
 8004c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c04:	2900      	cmp	r1, #0
 8004c06:	b096      	sub	sp, #88	; 0x58
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	da08      	bge.n	8004c20 <__swhatbuf_r+0x24>
 8004c0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	602a      	str	r2, [r5, #0]
 8004c16:	061a      	lsls	r2, r3, #24
 8004c18:	d410      	bmi.n	8004c3c <__swhatbuf_r+0x40>
 8004c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1e:	e00e      	b.n	8004c3e <__swhatbuf_r+0x42>
 8004c20:	466a      	mov	r2, sp
 8004c22:	f000 fc95 	bl	8005550 <_fstat_r>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	dbf1      	blt.n	8004c0e <__swhatbuf_r+0x12>
 8004c2a:	9a01      	ldr	r2, [sp, #4]
 8004c2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c34:	425a      	negs	r2, r3
 8004c36:	415a      	adcs	r2, r3
 8004c38:	602a      	str	r2, [r5, #0]
 8004c3a:	e7ee      	b.n	8004c1a <__swhatbuf_r+0x1e>
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	2000      	movs	r0, #0
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	b016      	add	sp, #88	; 0x58
 8004c44:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c48 <__smakebuf_r>:
 8004c48:	898b      	ldrh	r3, [r1, #12]
 8004c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c4c:	079d      	lsls	r5, r3, #30
 8004c4e:	4606      	mov	r6, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	d507      	bpl.n	8004c64 <__smakebuf_r+0x1c>
 8004c54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	6163      	str	r3, [r4, #20]
 8004c60:	b002      	add	sp, #8
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	ab01      	add	r3, sp, #4
 8004c66:	466a      	mov	r2, sp
 8004c68:	f7ff ffc8 	bl	8004bfc <__swhatbuf_r>
 8004c6c:	9900      	ldr	r1, [sp, #0]
 8004c6e:	4605      	mov	r5, r0
 8004c70:	4630      	mov	r0, r6
 8004c72:	f000 f895 	bl	8004da0 <_malloc_r>
 8004c76:	b948      	cbnz	r0, 8004c8c <__smakebuf_r+0x44>
 8004c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7c:	059a      	lsls	r2, r3, #22
 8004c7e:	d4ef      	bmi.n	8004c60 <__smakebuf_r+0x18>
 8004c80:	f023 0303 	bic.w	r3, r3, #3
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	e7e3      	b.n	8004c54 <__smakebuf_r+0xc>
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <__smakebuf_r+0x7c>)
 8004c8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	6020      	str	r0, [r4, #0]
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	9b00      	ldr	r3, [sp, #0]
 8004c9c:	6163      	str	r3, [r4, #20]
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	6120      	str	r0, [r4, #16]
 8004ca2:	b15b      	cbz	r3, 8004cbc <__smakebuf_r+0x74>
 8004ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f000 fc63 	bl	8005574 <_isatty_r>
 8004cae:	b128      	cbz	r0, 8004cbc <__smakebuf_r+0x74>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	89a0      	ldrh	r0, [r4, #12]
 8004cbe:	4305      	orrs	r5, r0
 8004cc0:	81a5      	strh	r5, [r4, #12]
 8004cc2:	e7cd      	b.n	8004c60 <__smakebuf_r+0x18>
 8004cc4:	08004a55 	.word	0x08004a55

08004cc8 <_free_r>:
 8004cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	d044      	beq.n	8004d58 <_free_r+0x90>
 8004cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd2:	9001      	str	r0, [sp, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cda:	bfb8      	it	lt
 8004cdc:	18e4      	addlt	r4, r4, r3
 8004cde:	f000 fc6b 	bl	80055b8 <__malloc_lock>
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <_free_r+0x94>)
 8004ce4:	9801      	ldr	r0, [sp, #4]
 8004ce6:	6813      	ldr	r3, [r2, #0]
 8004ce8:	b933      	cbnz	r3, 8004cf8 <_free_r+0x30>
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	6014      	str	r4, [r2, #0]
 8004cee:	b003      	add	sp, #12
 8004cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cf4:	f000 bc66 	b.w	80055c4 <__malloc_unlock>
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d908      	bls.n	8004d0e <_free_r+0x46>
 8004cfc:	6825      	ldr	r5, [r4, #0]
 8004cfe:	1961      	adds	r1, r4, r5
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf01      	itttt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	1949      	addeq	r1, r1, r5
 8004d0a:	6021      	streq	r1, [r4, #0]
 8004d0c:	e7ed      	b.n	8004cea <_free_r+0x22>
 8004d0e:	461a      	mov	r2, r3
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b10b      	cbz	r3, 8004d18 <_free_r+0x50>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d9fa      	bls.n	8004d0e <_free_r+0x46>
 8004d18:	6811      	ldr	r1, [r2, #0]
 8004d1a:	1855      	adds	r5, r2, r1
 8004d1c:	42a5      	cmp	r5, r4
 8004d1e:	d10b      	bne.n	8004d38 <_free_r+0x70>
 8004d20:	6824      	ldr	r4, [r4, #0]
 8004d22:	4421      	add	r1, r4
 8004d24:	1854      	adds	r4, r2, r1
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	d1e0      	bne.n	8004cee <_free_r+0x26>
 8004d2c:	681c      	ldr	r4, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	6053      	str	r3, [r2, #4]
 8004d32:	4421      	add	r1, r4
 8004d34:	6011      	str	r1, [r2, #0]
 8004d36:	e7da      	b.n	8004cee <_free_r+0x26>
 8004d38:	d902      	bls.n	8004d40 <_free_r+0x78>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	6003      	str	r3, [r0, #0]
 8004d3e:	e7d6      	b.n	8004cee <_free_r+0x26>
 8004d40:	6825      	ldr	r5, [r4, #0]
 8004d42:	1961      	adds	r1, r4, r5
 8004d44:	428b      	cmp	r3, r1
 8004d46:	bf04      	itt	eq
 8004d48:	6819      	ldreq	r1, [r3, #0]
 8004d4a:	685b      	ldreq	r3, [r3, #4]
 8004d4c:	6063      	str	r3, [r4, #4]
 8004d4e:	bf04      	itt	eq
 8004d50:	1949      	addeq	r1, r1, r5
 8004d52:	6021      	streq	r1, [r4, #0]
 8004d54:	6054      	str	r4, [r2, #4]
 8004d56:	e7ca      	b.n	8004cee <_free_r+0x26>
 8004d58:	b003      	add	sp, #12
 8004d5a:	bd30      	pop	{r4, r5, pc}
 8004d5c:	20000868 	.word	0x20000868

08004d60 <sbrk_aligned>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	4e0e      	ldr	r6, [pc, #56]	; (8004d9c <sbrk_aligned+0x3c>)
 8004d64:	460c      	mov	r4, r1
 8004d66:	6831      	ldr	r1, [r6, #0]
 8004d68:	4605      	mov	r5, r0
 8004d6a:	b911      	cbnz	r1, 8004d72 <sbrk_aligned+0x12>
 8004d6c:	f000 fb7a 	bl	8005464 <_sbrk_r>
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	4621      	mov	r1, r4
 8004d74:	4628      	mov	r0, r5
 8004d76:	f000 fb75 	bl	8005464 <_sbrk_r>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	d00a      	beq.n	8004d94 <sbrk_aligned+0x34>
 8004d7e:	1cc4      	adds	r4, r0, #3
 8004d80:	f024 0403 	bic.w	r4, r4, #3
 8004d84:	42a0      	cmp	r0, r4
 8004d86:	d007      	beq.n	8004d98 <sbrk_aligned+0x38>
 8004d88:	1a21      	subs	r1, r4, r0
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f000 fb6a 	bl	8005464 <_sbrk_r>
 8004d90:	3001      	adds	r0, #1
 8004d92:	d101      	bne.n	8004d98 <sbrk_aligned+0x38>
 8004d94:	f04f 34ff 	mov.w	r4, #4294967295
 8004d98:	4620      	mov	r0, r4
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	2000086c 	.word	0x2000086c

08004da0 <_malloc_r>:
 8004da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da4:	1ccd      	adds	r5, r1, #3
 8004da6:	f025 0503 	bic.w	r5, r5, #3
 8004daa:	3508      	adds	r5, #8
 8004dac:	2d0c      	cmp	r5, #12
 8004dae:	bf38      	it	cc
 8004db0:	250c      	movcc	r5, #12
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	4607      	mov	r7, r0
 8004db6:	db01      	blt.n	8004dbc <_malloc_r+0x1c>
 8004db8:	42a9      	cmp	r1, r5
 8004dba:	d905      	bls.n	8004dc8 <_malloc_r+0x28>
 8004dbc:	230c      	movs	r3, #12
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc8:	4e2e      	ldr	r6, [pc, #184]	; (8004e84 <_malloc_r+0xe4>)
 8004dca:	f000 fbf5 	bl	80055b8 <__malloc_lock>
 8004dce:	6833      	ldr	r3, [r6, #0]
 8004dd0:	461c      	mov	r4, r3
 8004dd2:	bb34      	cbnz	r4, 8004e22 <_malloc_r+0x82>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f7ff ffc2 	bl	8004d60 <sbrk_aligned>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	4604      	mov	r4, r0
 8004de0:	d14d      	bne.n	8004e7e <_malloc_r+0xde>
 8004de2:	6834      	ldr	r4, [r6, #0]
 8004de4:	4626      	mov	r6, r4
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	d140      	bne.n	8004e6c <_malloc_r+0xcc>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	4631      	mov	r1, r6
 8004dee:	4638      	mov	r0, r7
 8004df0:	eb04 0803 	add.w	r8, r4, r3
 8004df4:	f000 fb36 	bl	8005464 <_sbrk_r>
 8004df8:	4580      	cmp	r8, r0
 8004dfa:	d13a      	bne.n	8004e72 <_malloc_r+0xd2>
 8004dfc:	6821      	ldr	r1, [r4, #0]
 8004dfe:	3503      	adds	r5, #3
 8004e00:	1a6d      	subs	r5, r5, r1
 8004e02:	f025 0503 	bic.w	r5, r5, #3
 8004e06:	3508      	adds	r5, #8
 8004e08:	2d0c      	cmp	r5, #12
 8004e0a:	bf38      	it	cc
 8004e0c:	250c      	movcc	r5, #12
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4638      	mov	r0, r7
 8004e12:	f7ff ffa5 	bl	8004d60 <sbrk_aligned>
 8004e16:	3001      	adds	r0, #1
 8004e18:	d02b      	beq.n	8004e72 <_malloc_r+0xd2>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	442b      	add	r3, r5
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	e00e      	b.n	8004e40 <_malloc_r+0xa0>
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	1b52      	subs	r2, r2, r5
 8004e26:	d41e      	bmi.n	8004e66 <_malloc_r+0xc6>
 8004e28:	2a0b      	cmp	r2, #11
 8004e2a:	d916      	bls.n	8004e5a <_malloc_r+0xba>
 8004e2c:	1961      	adds	r1, r4, r5
 8004e2e:	42a3      	cmp	r3, r4
 8004e30:	6025      	str	r5, [r4, #0]
 8004e32:	bf18      	it	ne
 8004e34:	6059      	strne	r1, [r3, #4]
 8004e36:	6863      	ldr	r3, [r4, #4]
 8004e38:	bf08      	it	eq
 8004e3a:	6031      	streq	r1, [r6, #0]
 8004e3c:	5162      	str	r2, [r4, r5]
 8004e3e:	604b      	str	r3, [r1, #4]
 8004e40:	4638      	mov	r0, r7
 8004e42:	f104 060b 	add.w	r6, r4, #11
 8004e46:	f000 fbbd 	bl	80055c4 <__malloc_unlock>
 8004e4a:	f026 0607 	bic.w	r6, r6, #7
 8004e4e:	1d23      	adds	r3, r4, #4
 8004e50:	1af2      	subs	r2, r6, r3
 8004e52:	d0b6      	beq.n	8004dc2 <_malloc_r+0x22>
 8004e54:	1b9b      	subs	r3, r3, r6
 8004e56:	50a3      	str	r3, [r4, r2]
 8004e58:	e7b3      	b.n	8004dc2 <_malloc_r+0x22>
 8004e5a:	6862      	ldr	r2, [r4, #4]
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	bf0c      	ite	eq
 8004e60:	6032      	streq	r2, [r6, #0]
 8004e62:	605a      	strne	r2, [r3, #4]
 8004e64:	e7ec      	b.n	8004e40 <_malloc_r+0xa0>
 8004e66:	4623      	mov	r3, r4
 8004e68:	6864      	ldr	r4, [r4, #4]
 8004e6a:	e7b2      	b.n	8004dd2 <_malloc_r+0x32>
 8004e6c:	4634      	mov	r4, r6
 8004e6e:	6876      	ldr	r6, [r6, #4]
 8004e70:	e7b9      	b.n	8004de6 <_malloc_r+0x46>
 8004e72:	230c      	movs	r3, #12
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	4638      	mov	r0, r7
 8004e78:	f000 fba4 	bl	80055c4 <__malloc_unlock>
 8004e7c:	e7a1      	b.n	8004dc2 <_malloc_r+0x22>
 8004e7e:	6025      	str	r5, [r4, #0]
 8004e80:	e7de      	b.n	8004e40 <_malloc_r+0xa0>
 8004e82:	bf00      	nop
 8004e84:	20000868 	.word	0x20000868

08004e88 <__sfputc_r>:
 8004e88:	6893      	ldr	r3, [r2, #8]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	b410      	push	{r4}
 8004e90:	6093      	str	r3, [r2, #8]
 8004e92:	da08      	bge.n	8004ea6 <__sfputc_r+0x1e>
 8004e94:	6994      	ldr	r4, [r2, #24]
 8004e96:	42a3      	cmp	r3, r4
 8004e98:	db01      	blt.n	8004e9e <__sfputc_r+0x16>
 8004e9a:	290a      	cmp	r1, #10
 8004e9c:	d103      	bne.n	8004ea6 <__sfputc_r+0x1e>
 8004e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea2:	f7ff bc31 	b.w	8004708 <__swbuf_r>
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	1c58      	adds	r0, r3, #1
 8004eaa:	6010      	str	r0, [r2, #0]
 8004eac:	7019      	strb	r1, [r3, #0]
 8004eae:	4608      	mov	r0, r1
 8004eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <__sfputs_r>:
 8004eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb8:	4606      	mov	r6, r0
 8004eba:	460f      	mov	r7, r1
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	18d5      	adds	r5, r2, r3
 8004ec0:	42ac      	cmp	r4, r5
 8004ec2:	d101      	bne.n	8004ec8 <__sfputs_r+0x12>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e007      	b.n	8004ed8 <__sfputs_r+0x22>
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	463a      	mov	r2, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f7ff ffda 	bl	8004e88 <__sfputc_r>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d1f3      	bne.n	8004ec0 <__sfputs_r+0xa>
 8004ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004edc <_vfiprintf_r>:
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	460d      	mov	r5, r1
 8004ee2:	b09d      	sub	sp, #116	; 0x74
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	4698      	mov	r8, r3
 8004ee8:	4606      	mov	r6, r0
 8004eea:	b118      	cbz	r0, 8004ef4 <_vfiprintf_r+0x18>
 8004eec:	6983      	ldr	r3, [r0, #24]
 8004eee:	b90b      	cbnz	r3, 8004ef4 <_vfiprintf_r+0x18>
 8004ef0:	f7ff fde4 	bl	8004abc <__sinit>
 8004ef4:	4b89      	ldr	r3, [pc, #548]	; (800511c <_vfiprintf_r+0x240>)
 8004ef6:	429d      	cmp	r5, r3
 8004ef8:	d11b      	bne.n	8004f32 <_vfiprintf_r+0x56>
 8004efa:	6875      	ldr	r5, [r6, #4]
 8004efc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004efe:	07d9      	lsls	r1, r3, #31
 8004f00:	d405      	bmi.n	8004f0e <_vfiprintf_r+0x32>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	059a      	lsls	r2, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_vfiprintf_r+0x32>
 8004f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f0a:	f7ff fe75 	bl	8004bf8 <__retarget_lock_acquire_recursive>
 8004f0e:	89ab      	ldrh	r3, [r5, #12]
 8004f10:	071b      	lsls	r3, r3, #28
 8004f12:	d501      	bpl.n	8004f18 <_vfiprintf_r+0x3c>
 8004f14:	692b      	ldr	r3, [r5, #16]
 8004f16:	b9eb      	cbnz	r3, 8004f54 <_vfiprintf_r+0x78>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff fc46 	bl	80047ac <__swsetup_r>
 8004f20:	b1c0      	cbz	r0, 8004f54 <_vfiprintf_r+0x78>
 8004f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f24:	07dc      	lsls	r4, r3, #31
 8004f26:	d50e      	bpl.n	8004f46 <_vfiprintf_r+0x6a>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	b01d      	add	sp, #116	; 0x74
 8004f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f32:	4b7b      	ldr	r3, [pc, #492]	; (8005120 <_vfiprintf_r+0x244>)
 8004f34:	429d      	cmp	r5, r3
 8004f36:	d101      	bne.n	8004f3c <_vfiprintf_r+0x60>
 8004f38:	68b5      	ldr	r5, [r6, #8]
 8004f3a:	e7df      	b.n	8004efc <_vfiprintf_r+0x20>
 8004f3c:	4b79      	ldr	r3, [pc, #484]	; (8005124 <_vfiprintf_r+0x248>)
 8004f3e:	429d      	cmp	r5, r3
 8004f40:	bf08      	it	eq
 8004f42:	68f5      	ldreq	r5, [r6, #12]
 8004f44:	e7da      	b.n	8004efc <_vfiprintf_r+0x20>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	0598      	lsls	r0, r3, #22
 8004f4a:	d4ed      	bmi.n	8004f28 <_vfiprintf_r+0x4c>
 8004f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4e:	f7ff fe54 	bl	8004bfa <__retarget_lock_release_recursive>
 8004f52:	e7e9      	b.n	8004f28 <_vfiprintf_r+0x4c>
 8004f54:	2300      	movs	r3, #0
 8004f56:	9309      	str	r3, [sp, #36]	; 0x24
 8004f58:	2320      	movs	r3, #32
 8004f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f62:	2330      	movs	r3, #48	; 0x30
 8004f64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005128 <_vfiprintf_r+0x24c>
 8004f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f6c:	f04f 0901 	mov.w	r9, #1
 8004f70:	4623      	mov	r3, r4
 8004f72:	469a      	mov	sl, r3
 8004f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f78:	b10a      	cbz	r2, 8004f7e <_vfiprintf_r+0xa2>
 8004f7a:	2a25      	cmp	r2, #37	; 0x25
 8004f7c:	d1f9      	bne.n	8004f72 <_vfiprintf_r+0x96>
 8004f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f82:	d00b      	beq.n	8004f9c <_vfiprintf_r+0xc0>
 8004f84:	465b      	mov	r3, fp
 8004f86:	4622      	mov	r2, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f7ff ff93 	bl	8004eb6 <__sfputs_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	f000 80aa 	beq.w	80050ea <_vfiprintf_r+0x20e>
 8004f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f98:	445a      	add	r2, fp
 8004f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80a2 	beq.w	80050ea <_vfiprintf_r+0x20e>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fb0:	f10a 0a01 	add.w	sl, sl, #1
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fbc:	931a      	str	r3, [sp, #104]	; 0x68
 8004fbe:	4654      	mov	r4, sl
 8004fc0:	2205      	movs	r2, #5
 8004fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc6:	4858      	ldr	r0, [pc, #352]	; (8005128 <_vfiprintf_r+0x24c>)
 8004fc8:	f7fb f912 	bl	80001f0 <memchr>
 8004fcc:	9a04      	ldr	r2, [sp, #16]
 8004fce:	b9d8      	cbnz	r0, 8005008 <_vfiprintf_r+0x12c>
 8004fd0:	06d1      	lsls	r1, r2, #27
 8004fd2:	bf44      	itt	mi
 8004fd4:	2320      	movmi	r3, #32
 8004fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fda:	0713      	lsls	r3, r2, #28
 8004fdc:	bf44      	itt	mi
 8004fde:	232b      	movmi	r3, #43	; 0x2b
 8004fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8004fea:	d015      	beq.n	8005018 <_vfiprintf_r+0x13c>
 8004fec:	9a07      	ldr	r2, [sp, #28]
 8004fee:	4654      	mov	r4, sl
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f04f 0c0a 	mov.w	ip, #10
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ffc:	3b30      	subs	r3, #48	; 0x30
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	d94e      	bls.n	80050a0 <_vfiprintf_r+0x1c4>
 8005002:	b1b0      	cbz	r0, 8005032 <_vfiprintf_r+0x156>
 8005004:	9207      	str	r2, [sp, #28]
 8005006:	e014      	b.n	8005032 <_vfiprintf_r+0x156>
 8005008:	eba0 0308 	sub.w	r3, r0, r8
 800500c:	fa09 f303 	lsl.w	r3, r9, r3
 8005010:	4313      	orrs	r3, r2
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	46a2      	mov	sl, r4
 8005016:	e7d2      	b.n	8004fbe <_vfiprintf_r+0xe2>
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	1d19      	adds	r1, r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	9103      	str	r1, [sp, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	bfbb      	ittet	lt
 8005024:	425b      	neglt	r3, r3
 8005026:	f042 0202 	orrlt.w	r2, r2, #2
 800502a:	9307      	strge	r3, [sp, #28]
 800502c:	9307      	strlt	r3, [sp, #28]
 800502e:	bfb8      	it	lt
 8005030:	9204      	strlt	r2, [sp, #16]
 8005032:	7823      	ldrb	r3, [r4, #0]
 8005034:	2b2e      	cmp	r3, #46	; 0x2e
 8005036:	d10c      	bne.n	8005052 <_vfiprintf_r+0x176>
 8005038:	7863      	ldrb	r3, [r4, #1]
 800503a:	2b2a      	cmp	r3, #42	; 0x2a
 800503c:	d135      	bne.n	80050aa <_vfiprintf_r+0x1ce>
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	1d1a      	adds	r2, r3, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	9203      	str	r2, [sp, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	bfb8      	it	lt
 800504a:	f04f 33ff 	movlt.w	r3, #4294967295
 800504e:	3402      	adds	r4, #2
 8005050:	9305      	str	r3, [sp, #20]
 8005052:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005138 <_vfiprintf_r+0x25c>
 8005056:	7821      	ldrb	r1, [r4, #0]
 8005058:	2203      	movs	r2, #3
 800505a:	4650      	mov	r0, sl
 800505c:	f7fb f8c8 	bl	80001f0 <memchr>
 8005060:	b140      	cbz	r0, 8005074 <_vfiprintf_r+0x198>
 8005062:	2340      	movs	r3, #64	; 0x40
 8005064:	eba0 000a 	sub.w	r0, r0, sl
 8005068:	fa03 f000 	lsl.w	r0, r3, r0
 800506c:	9b04      	ldr	r3, [sp, #16]
 800506e:	4303      	orrs	r3, r0
 8005070:	3401      	adds	r4, #1
 8005072:	9304      	str	r3, [sp, #16]
 8005074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005078:	482c      	ldr	r0, [pc, #176]	; (800512c <_vfiprintf_r+0x250>)
 800507a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800507e:	2206      	movs	r2, #6
 8005080:	f7fb f8b6 	bl	80001f0 <memchr>
 8005084:	2800      	cmp	r0, #0
 8005086:	d03f      	beq.n	8005108 <_vfiprintf_r+0x22c>
 8005088:	4b29      	ldr	r3, [pc, #164]	; (8005130 <_vfiprintf_r+0x254>)
 800508a:	bb1b      	cbnz	r3, 80050d4 <_vfiprintf_r+0x1f8>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	3307      	adds	r3, #7
 8005090:	f023 0307 	bic.w	r3, r3, #7
 8005094:	3308      	adds	r3, #8
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509a:	443b      	add	r3, r7
 800509c:	9309      	str	r3, [sp, #36]	; 0x24
 800509e:	e767      	b.n	8004f70 <_vfiprintf_r+0x94>
 80050a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80050a4:	460c      	mov	r4, r1
 80050a6:	2001      	movs	r0, #1
 80050a8:	e7a5      	b.n	8004ff6 <_vfiprintf_r+0x11a>
 80050aa:	2300      	movs	r3, #0
 80050ac:	3401      	adds	r4, #1
 80050ae:	9305      	str	r3, [sp, #20]
 80050b0:	4619      	mov	r1, r3
 80050b2:	f04f 0c0a 	mov.w	ip, #10
 80050b6:	4620      	mov	r0, r4
 80050b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050bc:	3a30      	subs	r2, #48	; 0x30
 80050be:	2a09      	cmp	r2, #9
 80050c0:	d903      	bls.n	80050ca <_vfiprintf_r+0x1ee>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0c5      	beq.n	8005052 <_vfiprintf_r+0x176>
 80050c6:	9105      	str	r1, [sp, #20]
 80050c8:	e7c3      	b.n	8005052 <_vfiprintf_r+0x176>
 80050ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ce:	4604      	mov	r4, r0
 80050d0:	2301      	movs	r3, #1
 80050d2:	e7f0      	b.n	80050b6 <_vfiprintf_r+0x1da>
 80050d4:	ab03      	add	r3, sp, #12
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	462a      	mov	r2, r5
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <_vfiprintf_r+0x258>)
 80050dc:	a904      	add	r1, sp, #16
 80050de:	4630      	mov	r0, r6
 80050e0:	f3af 8000 	nop.w
 80050e4:	4607      	mov	r7, r0
 80050e6:	1c78      	adds	r0, r7, #1
 80050e8:	d1d6      	bne.n	8005098 <_vfiprintf_r+0x1bc>
 80050ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050ec:	07d9      	lsls	r1, r3, #31
 80050ee:	d405      	bmi.n	80050fc <_vfiprintf_r+0x220>
 80050f0:	89ab      	ldrh	r3, [r5, #12]
 80050f2:	059a      	lsls	r2, r3, #22
 80050f4:	d402      	bmi.n	80050fc <_vfiprintf_r+0x220>
 80050f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f8:	f7ff fd7f 	bl	8004bfa <__retarget_lock_release_recursive>
 80050fc:	89ab      	ldrh	r3, [r5, #12]
 80050fe:	065b      	lsls	r3, r3, #25
 8005100:	f53f af12 	bmi.w	8004f28 <_vfiprintf_r+0x4c>
 8005104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005106:	e711      	b.n	8004f2c <_vfiprintf_r+0x50>
 8005108:	ab03      	add	r3, sp, #12
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	462a      	mov	r2, r5
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <_vfiprintf_r+0x258>)
 8005110:	a904      	add	r1, sp, #16
 8005112:	4630      	mov	r0, r6
 8005114:	f000 f880 	bl	8005218 <_printf_i>
 8005118:	e7e4      	b.n	80050e4 <_vfiprintf_r+0x208>
 800511a:	bf00      	nop
 800511c:	080057a8 	.word	0x080057a8
 8005120:	080057c8 	.word	0x080057c8
 8005124:	08005788 	.word	0x08005788
 8005128:	080057e8 	.word	0x080057e8
 800512c:	080057f2 	.word	0x080057f2
 8005130:	00000000 	.word	0x00000000
 8005134:	08004eb7 	.word	0x08004eb7
 8005138:	080057ee 	.word	0x080057ee

0800513c <_printf_common>:
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	4616      	mov	r6, r2
 8005142:	4699      	mov	r9, r3
 8005144:	688a      	ldr	r2, [r1, #8]
 8005146:	690b      	ldr	r3, [r1, #16]
 8005148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800514c:	4293      	cmp	r3, r2
 800514e:	bfb8      	it	lt
 8005150:	4613      	movlt	r3, r2
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005158:	4607      	mov	r7, r0
 800515a:	460c      	mov	r4, r1
 800515c:	b10a      	cbz	r2, 8005162 <_printf_common+0x26>
 800515e:	3301      	adds	r3, #1
 8005160:	6033      	str	r3, [r6, #0]
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	0699      	lsls	r1, r3, #26
 8005166:	bf42      	ittt	mi
 8005168:	6833      	ldrmi	r3, [r6, #0]
 800516a:	3302      	addmi	r3, #2
 800516c:	6033      	strmi	r3, [r6, #0]
 800516e:	6825      	ldr	r5, [r4, #0]
 8005170:	f015 0506 	ands.w	r5, r5, #6
 8005174:	d106      	bne.n	8005184 <_printf_common+0x48>
 8005176:	f104 0a19 	add.w	sl, r4, #25
 800517a:	68e3      	ldr	r3, [r4, #12]
 800517c:	6832      	ldr	r2, [r6, #0]
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	42ab      	cmp	r3, r5
 8005182:	dc26      	bgt.n	80051d2 <_printf_common+0x96>
 8005184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005188:	1e13      	subs	r3, r2, #0
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	bf18      	it	ne
 800518e:	2301      	movne	r3, #1
 8005190:	0692      	lsls	r2, r2, #26
 8005192:	d42b      	bmi.n	80051ec <_printf_common+0xb0>
 8005194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005198:	4649      	mov	r1, r9
 800519a:	4638      	mov	r0, r7
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d01e      	beq.n	80051e0 <_printf_common+0xa4>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	68e5      	ldr	r5, [r4, #12]
 80051a6:	6832      	ldr	r2, [r6, #0]
 80051a8:	f003 0306 	and.w	r3, r3, #6
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	bf08      	it	eq
 80051b0:	1aad      	subeq	r5, r5, r2
 80051b2:	68a3      	ldr	r3, [r4, #8]
 80051b4:	6922      	ldr	r2, [r4, #16]
 80051b6:	bf0c      	ite	eq
 80051b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051bc:	2500      	movne	r5, #0
 80051be:	4293      	cmp	r3, r2
 80051c0:	bfc4      	itt	gt
 80051c2:	1a9b      	subgt	r3, r3, r2
 80051c4:	18ed      	addgt	r5, r5, r3
 80051c6:	2600      	movs	r6, #0
 80051c8:	341a      	adds	r4, #26
 80051ca:	42b5      	cmp	r5, r6
 80051cc:	d11a      	bne.n	8005204 <_printf_common+0xc8>
 80051ce:	2000      	movs	r0, #0
 80051d0:	e008      	b.n	80051e4 <_printf_common+0xa8>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4652      	mov	r2, sl
 80051d6:	4649      	mov	r1, r9
 80051d8:	4638      	mov	r0, r7
 80051da:	47c0      	blx	r8
 80051dc:	3001      	adds	r0, #1
 80051de:	d103      	bne.n	80051e8 <_printf_common+0xac>
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e8:	3501      	adds	r5, #1
 80051ea:	e7c6      	b.n	800517a <_printf_common+0x3e>
 80051ec:	18e1      	adds	r1, r4, r3
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	2030      	movs	r0, #48	; 0x30
 80051f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051f6:	4422      	add	r2, r4
 80051f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005200:	3302      	adds	r3, #2
 8005202:	e7c7      	b.n	8005194 <_printf_common+0x58>
 8005204:	2301      	movs	r3, #1
 8005206:	4622      	mov	r2, r4
 8005208:	4649      	mov	r1, r9
 800520a:	4638      	mov	r0, r7
 800520c:	47c0      	blx	r8
 800520e:	3001      	adds	r0, #1
 8005210:	d0e6      	beq.n	80051e0 <_printf_common+0xa4>
 8005212:	3601      	adds	r6, #1
 8005214:	e7d9      	b.n	80051ca <_printf_common+0x8e>
	...

08005218 <_printf_i>:
 8005218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	7e0f      	ldrb	r7, [r1, #24]
 800521e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005220:	2f78      	cmp	r7, #120	; 0x78
 8005222:	4691      	mov	r9, r2
 8005224:	4680      	mov	r8, r0
 8005226:	460c      	mov	r4, r1
 8005228:	469a      	mov	sl, r3
 800522a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800522e:	d807      	bhi.n	8005240 <_printf_i+0x28>
 8005230:	2f62      	cmp	r7, #98	; 0x62
 8005232:	d80a      	bhi.n	800524a <_printf_i+0x32>
 8005234:	2f00      	cmp	r7, #0
 8005236:	f000 80d8 	beq.w	80053ea <_printf_i+0x1d2>
 800523a:	2f58      	cmp	r7, #88	; 0x58
 800523c:	f000 80a3 	beq.w	8005386 <_printf_i+0x16e>
 8005240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005248:	e03a      	b.n	80052c0 <_printf_i+0xa8>
 800524a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800524e:	2b15      	cmp	r3, #21
 8005250:	d8f6      	bhi.n	8005240 <_printf_i+0x28>
 8005252:	a101      	add	r1, pc, #4	; (adr r1, 8005258 <_printf_i+0x40>)
 8005254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005258:	080052b1 	.word	0x080052b1
 800525c:	080052c5 	.word	0x080052c5
 8005260:	08005241 	.word	0x08005241
 8005264:	08005241 	.word	0x08005241
 8005268:	08005241 	.word	0x08005241
 800526c:	08005241 	.word	0x08005241
 8005270:	080052c5 	.word	0x080052c5
 8005274:	08005241 	.word	0x08005241
 8005278:	08005241 	.word	0x08005241
 800527c:	08005241 	.word	0x08005241
 8005280:	08005241 	.word	0x08005241
 8005284:	080053d1 	.word	0x080053d1
 8005288:	080052f5 	.word	0x080052f5
 800528c:	080053b3 	.word	0x080053b3
 8005290:	08005241 	.word	0x08005241
 8005294:	08005241 	.word	0x08005241
 8005298:	080053f3 	.word	0x080053f3
 800529c:	08005241 	.word	0x08005241
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	08005241 	.word	0x08005241
 80052a8:	08005241 	.word	0x08005241
 80052ac:	080053bb 	.word	0x080053bb
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	602a      	str	r2, [r5, #0]
 80052b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0a3      	b.n	800540c <_printf_i+0x1f4>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	6829      	ldr	r1, [r5, #0]
 80052c8:	0606      	lsls	r6, r0, #24
 80052ca:	f101 0304 	add.w	r3, r1, #4
 80052ce:	d50a      	bpl.n	80052e6 <_printf_i+0xce>
 80052d0:	680e      	ldr	r6, [r1, #0]
 80052d2:	602b      	str	r3, [r5, #0]
 80052d4:	2e00      	cmp	r6, #0
 80052d6:	da03      	bge.n	80052e0 <_printf_i+0xc8>
 80052d8:	232d      	movs	r3, #45	; 0x2d
 80052da:	4276      	negs	r6, r6
 80052dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e0:	485e      	ldr	r0, [pc, #376]	; (800545c <_printf_i+0x244>)
 80052e2:	230a      	movs	r3, #10
 80052e4:	e019      	b.n	800531a <_printf_i+0x102>
 80052e6:	680e      	ldr	r6, [r1, #0]
 80052e8:	602b      	str	r3, [r5, #0]
 80052ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052ee:	bf18      	it	ne
 80052f0:	b236      	sxthne	r6, r6
 80052f2:	e7ef      	b.n	80052d4 <_printf_i+0xbc>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	6820      	ldr	r0, [r4, #0]
 80052f8:	1d19      	adds	r1, r3, #4
 80052fa:	6029      	str	r1, [r5, #0]
 80052fc:	0601      	lsls	r1, r0, #24
 80052fe:	d501      	bpl.n	8005304 <_printf_i+0xec>
 8005300:	681e      	ldr	r6, [r3, #0]
 8005302:	e002      	b.n	800530a <_printf_i+0xf2>
 8005304:	0646      	lsls	r6, r0, #25
 8005306:	d5fb      	bpl.n	8005300 <_printf_i+0xe8>
 8005308:	881e      	ldrh	r6, [r3, #0]
 800530a:	4854      	ldr	r0, [pc, #336]	; (800545c <_printf_i+0x244>)
 800530c:	2f6f      	cmp	r7, #111	; 0x6f
 800530e:	bf0c      	ite	eq
 8005310:	2308      	moveq	r3, #8
 8005312:	230a      	movne	r3, #10
 8005314:	2100      	movs	r1, #0
 8005316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800531a:	6865      	ldr	r5, [r4, #4]
 800531c:	60a5      	str	r5, [r4, #8]
 800531e:	2d00      	cmp	r5, #0
 8005320:	bfa2      	ittt	ge
 8005322:	6821      	ldrge	r1, [r4, #0]
 8005324:	f021 0104 	bicge.w	r1, r1, #4
 8005328:	6021      	strge	r1, [r4, #0]
 800532a:	b90e      	cbnz	r6, 8005330 <_printf_i+0x118>
 800532c:	2d00      	cmp	r5, #0
 800532e:	d04d      	beq.n	80053cc <_printf_i+0x1b4>
 8005330:	4615      	mov	r5, r2
 8005332:	fbb6 f1f3 	udiv	r1, r6, r3
 8005336:	fb03 6711 	mls	r7, r3, r1, r6
 800533a:	5dc7      	ldrb	r7, [r0, r7]
 800533c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005340:	4637      	mov	r7, r6
 8005342:	42bb      	cmp	r3, r7
 8005344:	460e      	mov	r6, r1
 8005346:	d9f4      	bls.n	8005332 <_printf_i+0x11a>
 8005348:	2b08      	cmp	r3, #8
 800534a:	d10b      	bne.n	8005364 <_printf_i+0x14c>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	07de      	lsls	r6, r3, #31
 8005350:	d508      	bpl.n	8005364 <_printf_i+0x14c>
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	6861      	ldr	r1, [r4, #4]
 8005356:	4299      	cmp	r1, r3
 8005358:	bfde      	ittt	le
 800535a:	2330      	movle	r3, #48	; 0x30
 800535c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005360:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005364:	1b52      	subs	r2, r2, r5
 8005366:	6122      	str	r2, [r4, #16]
 8005368:	f8cd a000 	str.w	sl, [sp]
 800536c:	464b      	mov	r3, r9
 800536e:	aa03      	add	r2, sp, #12
 8005370:	4621      	mov	r1, r4
 8005372:	4640      	mov	r0, r8
 8005374:	f7ff fee2 	bl	800513c <_printf_common>
 8005378:	3001      	adds	r0, #1
 800537a:	d14c      	bne.n	8005416 <_printf_i+0x1fe>
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	b004      	add	sp, #16
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	4835      	ldr	r0, [pc, #212]	; (800545c <_printf_i+0x244>)
 8005388:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800538c:	6829      	ldr	r1, [r5, #0]
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f851 6b04 	ldr.w	r6, [r1], #4
 8005394:	6029      	str	r1, [r5, #0]
 8005396:	061d      	lsls	r5, r3, #24
 8005398:	d514      	bpl.n	80053c4 <_printf_i+0x1ac>
 800539a:	07df      	lsls	r7, r3, #31
 800539c:	bf44      	itt	mi
 800539e:	f043 0320 	orrmi.w	r3, r3, #32
 80053a2:	6023      	strmi	r3, [r4, #0]
 80053a4:	b91e      	cbnz	r6, 80053ae <_printf_i+0x196>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f023 0320 	bic.w	r3, r3, #32
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	2310      	movs	r3, #16
 80053b0:	e7b0      	b.n	8005314 <_printf_i+0xfc>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f043 0320 	orr.w	r3, r3, #32
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	2378      	movs	r3, #120	; 0x78
 80053bc:	4828      	ldr	r0, [pc, #160]	; (8005460 <_printf_i+0x248>)
 80053be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053c2:	e7e3      	b.n	800538c <_printf_i+0x174>
 80053c4:	0659      	lsls	r1, r3, #25
 80053c6:	bf48      	it	mi
 80053c8:	b2b6      	uxthmi	r6, r6
 80053ca:	e7e6      	b.n	800539a <_printf_i+0x182>
 80053cc:	4615      	mov	r5, r2
 80053ce:	e7bb      	b.n	8005348 <_printf_i+0x130>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	6826      	ldr	r6, [r4, #0]
 80053d4:	6961      	ldr	r1, [r4, #20]
 80053d6:	1d18      	adds	r0, r3, #4
 80053d8:	6028      	str	r0, [r5, #0]
 80053da:	0635      	lsls	r5, r6, #24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	d501      	bpl.n	80053e4 <_printf_i+0x1cc>
 80053e0:	6019      	str	r1, [r3, #0]
 80053e2:	e002      	b.n	80053ea <_printf_i+0x1d2>
 80053e4:	0670      	lsls	r0, r6, #25
 80053e6:	d5fb      	bpl.n	80053e0 <_printf_i+0x1c8>
 80053e8:	8019      	strh	r1, [r3, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	6123      	str	r3, [r4, #16]
 80053ee:	4615      	mov	r5, r2
 80053f0:	e7ba      	b.n	8005368 <_printf_i+0x150>
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	1d1a      	adds	r2, r3, #4
 80053f6:	602a      	str	r2, [r5, #0]
 80053f8:	681d      	ldr	r5, [r3, #0]
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	2100      	movs	r1, #0
 80053fe:	4628      	mov	r0, r5
 8005400:	f7fa fef6 	bl	80001f0 <memchr>
 8005404:	b108      	cbz	r0, 800540a <_printf_i+0x1f2>
 8005406:	1b40      	subs	r0, r0, r5
 8005408:	6060      	str	r0, [r4, #4]
 800540a:	6863      	ldr	r3, [r4, #4]
 800540c:	6123      	str	r3, [r4, #16]
 800540e:	2300      	movs	r3, #0
 8005410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005414:	e7a8      	b.n	8005368 <_printf_i+0x150>
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	462a      	mov	r2, r5
 800541a:	4649      	mov	r1, r9
 800541c:	4640      	mov	r0, r8
 800541e:	47d0      	blx	sl
 8005420:	3001      	adds	r0, #1
 8005422:	d0ab      	beq.n	800537c <_printf_i+0x164>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	079b      	lsls	r3, r3, #30
 8005428:	d413      	bmi.n	8005452 <_printf_i+0x23a>
 800542a:	68e0      	ldr	r0, [r4, #12]
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	4298      	cmp	r0, r3
 8005430:	bfb8      	it	lt
 8005432:	4618      	movlt	r0, r3
 8005434:	e7a4      	b.n	8005380 <_printf_i+0x168>
 8005436:	2301      	movs	r3, #1
 8005438:	4632      	mov	r2, r6
 800543a:	4649      	mov	r1, r9
 800543c:	4640      	mov	r0, r8
 800543e:	47d0      	blx	sl
 8005440:	3001      	adds	r0, #1
 8005442:	d09b      	beq.n	800537c <_printf_i+0x164>
 8005444:	3501      	adds	r5, #1
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	9903      	ldr	r1, [sp, #12]
 800544a:	1a5b      	subs	r3, r3, r1
 800544c:	42ab      	cmp	r3, r5
 800544e:	dcf2      	bgt.n	8005436 <_printf_i+0x21e>
 8005450:	e7eb      	b.n	800542a <_printf_i+0x212>
 8005452:	2500      	movs	r5, #0
 8005454:	f104 0619 	add.w	r6, r4, #25
 8005458:	e7f5      	b.n	8005446 <_printf_i+0x22e>
 800545a:	bf00      	nop
 800545c:	080057f9 	.word	0x080057f9
 8005460:	0800580a 	.word	0x0800580a

08005464 <_sbrk_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d06      	ldr	r5, [pc, #24]	; (8005480 <_sbrk_r+0x1c>)
 8005468:	2300      	movs	r3, #0
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	f7fb fe58 	bl	8001124 <_sbrk>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_sbrk_r+0x1a>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_sbrk_r+0x1a>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000870 	.word	0x20000870

08005484 <__sread>:
 8005484:	b510      	push	{r4, lr}
 8005486:	460c      	mov	r4, r1
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	f000 f8a0 	bl	80055d0 <_read_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	bfab      	itete	ge
 8005494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005496:	89a3      	ldrhlt	r3, [r4, #12]
 8005498:	181b      	addge	r3, r3, r0
 800549a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800549e:	bfac      	ite	ge
 80054a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054a2:	81a3      	strhlt	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__swrite>:
 80054a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	461f      	mov	r7, r3
 80054ac:	898b      	ldrh	r3, [r1, #12]
 80054ae:	05db      	lsls	r3, r3, #23
 80054b0:	4605      	mov	r5, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4616      	mov	r6, r2
 80054b6:	d505      	bpl.n	80054c4 <__swrite+0x1e>
 80054b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054bc:	2302      	movs	r3, #2
 80054be:	2200      	movs	r2, #0
 80054c0:	f000 f868 	bl	8005594 <_lseek_r>
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	4632      	mov	r2, r6
 80054d2:	463b      	mov	r3, r7
 80054d4:	4628      	mov	r0, r5
 80054d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	f000 b817 	b.w	800550c <_write_r>

080054de <__sseek>:
 80054de:	b510      	push	{r4, lr}
 80054e0:	460c      	mov	r4, r1
 80054e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e6:	f000 f855 	bl	8005594 <_lseek_r>
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	bf15      	itete	ne
 80054f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054fa:	81a3      	strheq	r3, [r4, #12]
 80054fc:	bf18      	it	ne
 80054fe:	81a3      	strhne	r3, [r4, #12]
 8005500:	bd10      	pop	{r4, pc}

08005502 <__sclose>:
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 b813 	b.w	8005530 <_close_r>
	...

0800550c <_write_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_write_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fb fdb1 	bl	8001082 <_write>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_write_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_write_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20000870 	.word	0x20000870

08005530 <_close_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d06      	ldr	r5, [pc, #24]	; (800554c <_close_r+0x1c>)
 8005534:	2300      	movs	r3, #0
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f7fb fdbd 	bl	80010ba <_close>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_close_r+0x1a>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_close_r+0x1a>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20000870 	.word	0x20000870

08005550 <_fstat_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d07      	ldr	r5, [pc, #28]	; (8005570 <_fstat_r+0x20>)
 8005554:	2300      	movs	r3, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	4611      	mov	r1, r2
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	f7fb fdb8 	bl	80010d2 <_fstat>
 8005562:	1c43      	adds	r3, r0, #1
 8005564:	d102      	bne.n	800556c <_fstat_r+0x1c>
 8005566:	682b      	ldr	r3, [r5, #0]
 8005568:	b103      	cbz	r3, 800556c <_fstat_r+0x1c>
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	bd38      	pop	{r3, r4, r5, pc}
 800556e:	bf00      	nop
 8005570:	20000870 	.word	0x20000870

08005574 <_isatty_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d06      	ldr	r5, [pc, #24]	; (8005590 <_isatty_r+0x1c>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fb fdb7 	bl	80010f2 <_isatty>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_isatty_r+0x1a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_isatty_r+0x1a>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	20000870 	.word	0x20000870

08005594 <_lseek_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d07      	ldr	r5, [pc, #28]	; (80055b4 <_lseek_r+0x20>)
 8005598:	4604      	mov	r4, r0
 800559a:	4608      	mov	r0, r1
 800559c:	4611      	mov	r1, r2
 800559e:	2200      	movs	r2, #0
 80055a0:	602a      	str	r2, [r5, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f7fb fdb0 	bl	8001108 <_lseek>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_lseek_r+0x1e>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_lseek_r+0x1e>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	20000870 	.word	0x20000870

080055b8 <__malloc_lock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__malloc_lock+0x8>)
 80055ba:	f7ff bb1d 	b.w	8004bf8 <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000864 	.word	0x20000864

080055c4 <__malloc_unlock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__malloc_unlock+0x8>)
 80055c6:	f7ff bb18 	b.w	8004bfa <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000864 	.word	0x20000864

080055d0 <_read_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	; (80055f0 <_read_r+0x20>)
 80055d4:	4604      	mov	r4, r0
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	602a      	str	r2, [r5, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f7fb fd32 	bl	8001048 <_read>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_read_r+0x1e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_read_r+0x1e>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20000870 	.word	0x20000870

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
