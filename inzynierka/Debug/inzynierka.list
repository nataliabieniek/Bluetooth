
inzynierka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004390  08004390  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004398  08004398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007f0  200007f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104e4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002146  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b40  00000000  00000000  00033260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024573  00000000  00000000  00033da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de8e  00000000  00000000  00058313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da807  00000000  00000000  000661a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001409a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000327c  00000000  00000000  001409f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004218 	.word	0x08004218

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004218 	.word	0x08004218

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <bluetooth_sendStartMessage>:

#include "bluetooth.h"
#include <string.h>

void bluetooth_sendStartMessage()
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <bluetooth_sendStartMessage+0x48>)
 800050e:	f001 fcf7 	bl	8001f00 <HAL_GPIO_WritePin>
	const char message[] = "Menu komend:\r\n1 - zmiana koloru\r\n2 - zmiana wzoru\r\n";
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <bluetooth_sendStartMessage+0x4c>)
 8000514:	1d3c      	adds	r4, r7, #4
 8000516:	461d      	mov	r5, r3
 8000518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fe5e 	bl	80001ec <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	b29a      	uxth	r2, r3
 8000534:	1d39      	adds	r1, r7, #4
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <bluetooth_sendStartMessage+0x50>)
 800053c:	f002 fafb 	bl	8002b36 <HAL_UART_Transmit>
}
 8000540:	bf00      	nop
 8000542:	3738      	adds	r7, #56	; 0x38
 8000544:	46bd      	mov	sp, r7
 8000546:	bdb0      	pop	{r4, r5, r7, pc}
 8000548:	40020400 	.word	0x40020400
 800054c:	08004230 	.word	0x08004230
 8000550:	20000250 	.word	0x20000250

08000554 <bluetooth_sendNotKnowMessage>:

void bluetooth_sendNotKnowMessage()
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <bluetooth_sendNotKnowMessage+0x44>)
 8000562:	f001 fccd 	bl	8001f00 <HAL_GPIO_WritePin>
	const char message[] = "Niepoprawnie wprowadzona komenda!\r\n";
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <bluetooth_sendNotKnowMessage+0x48>)
 8000568:	1d3c      	adds	r4, r7, #4
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fe36 	bl	80001ec <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <bluetooth_sendNotKnowMessage+0x4c>)
 800058c:	f002 fad3 	bl	8002b36 <HAL_UART_Transmit>

}
 8000590:	bf00      	nop
 8000592:	3728      	adds	r7, #40	; 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bdb0      	pop	{r4, r5, r7, pc}
 8000598:	40020400 	.word	0x40020400
 800059c:	08004264 	.word	0x08004264
 80005a0:	20000250 	.word	0x20000250

080005a4 <bluetooth_reciveBasicMenu>:
uint8_t bluetooth_reciveBasicMenu()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t recivedMenu=0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		HAL_UART_Receive_IT(&huart2, recivedMenu, 1);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2201      	movs	r2, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <bluetooth_reciveBasicMenu+0x3c>)
 80005b6:	f002 fb50 	bl	8002c5a <HAL_UART_Receive_IT>
		if((recivedMenu!= 1) && (recivedMenu!= 2))
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d009      	beq.n	80005d4 <bluetooth_reciveBasicMenu+0x30>
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d006      	beq.n	80005d4 <bluetooth_reciveBasicMenu+0x30>
		{
			bluetooth_sendNotKnowMessage();
 80005c6:	f7ff ffc5 	bl	8000554 <bluetooth_sendNotKnowMessage>
			HAL_Delay(5000);
 80005ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80005ce:	f000 fdfb 	bl	80011c8 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, recivedMenu, 1);
 80005d2:	e7ec      	b.n	80005ae <bluetooth_reciveBasicMenu+0xa>
		}
		else
			return recivedMenu;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
	}
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000250 	.word	0x20000250

080005e4 <bluetooth_reciveExpandedMenu_Coulors>:
void bluetooth_reciveExpandedMenu_Coulors(uint8_t red, uint8_t green, uint8_t blue)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]
	uint8_t Received[10];


}
 80005f6:	bf00      	nop
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <bluetooth_reciveExpandedMenu_Images>:
uint8_t bluetooth_reciveExpandedMenu_Images()
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b098      	sub	sp, #96	; 0x60
 8000608:	af00      	add	r7, sp, #0
	uint8_t recivedMenu=0;
 800060a:	2300      	movs	r3, #0
 800060c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_UART_Receive_IT(&huart2, recivedMenu, 1);
 8000610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000614:	2201      	movs	r2, #1
 8000616:	4619      	mov	r1, r3
 8000618:	4835      	ldr	r0, [pc, #212]	; (80006f0 <bluetooth_reciveExpandedMenu_Images+0xec>)
 800061a:	f002 fb1e 	bl	8002c5a <HAL_UART_Receive_IT>
	if (recivedMenu == 65)
 800061e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000622:	2b41      	cmp	r3, #65	; 0x41
 8000624:	d118      	bne.n	8000658 <bluetooth_reciveExpandedMenu_Images+0x54>
	{
		const char message[] = "\t[LED] slonce wyswietlenie\r\n";
 8000626:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <bluetooth_reciveExpandedMenu_Images+0xf0>)
 8000628:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800062c:	461d      	mov	r5, r3
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000636:	c407      	stmia	r4!, {r0, r1, r2}
 8000638:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 800063a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdd4 	bl	80001ec <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	4827      	ldr	r0, [pc, #156]	; (80006f0 <bluetooth_reciveExpandedMenu_Images+0xec>)
 8000652:	f002 fa70 	bl	8002b36 <HAL_UART_Transmit>
 8000656:	e044      	b.n	80006e2 <bluetooth_reciveExpandedMenu_Images+0xde>
	}
	else if (recivedMenu == 66)
 8000658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800065c:	2b42      	cmp	r3, #66	; 0x42
 800065e:	d118      	bne.n	8000692 <bluetooth_reciveExpandedMenu_Images+0x8e>
	{
		const char message[] = "\t[LED] kwiatek wyswietlenie\r\n";
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <bluetooth_reciveExpandedMenu_Images+0xf4>)
 8000662:	f107 0420 	add.w	r4, r7, #32
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000670:	c407      	stmia	r4!, {r0, r1, r2}
 8000672:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdb7 	bl	80001ec <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f107 0120 	add.w	r1, r7, #32
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	4819      	ldr	r0, [pc, #100]	; (80006f0 <bluetooth_reciveExpandedMenu_Images+0xec>)
 800068c:	f002 fa53 	bl	8002b36 <HAL_UART_Transmit>
 8000690:	e027      	b.n	80006e2 <bluetooth_reciveExpandedMenu_Images+0xde>
	}
	else if (recivedMenu == 67)
 8000692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000696:	2b43      	cmp	r3, #67	; 0x43
 8000698:	d115      	bne.n	80006c6 <bluetooth_reciveExpandedMenu_Images+0xc2>
	{
		const char message[] = "\t[LED] okregi wyswietlenie\r\n";
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <bluetooth_reciveExpandedMenu_Images+0xf8>)
 800069c:	463c      	mov	r4, r7
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006a8:	c407      	stmia	r4!, {r0, r1, r2}
 80006aa:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 80006ac:	463b      	mov	r3, r7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd9c 	bl	80001ec <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4639      	mov	r1, r7
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	480c      	ldr	r0, [pc, #48]	; (80006f0 <bluetooth_reciveExpandedMenu_Images+0xec>)
 80006c0:	f002 fa39 	bl	8002b36 <HAL_UART_Transmit>
 80006c4:	e00d      	b.n	80006e2 <bluetooth_reciveExpandedMenu_Images+0xde>
	}
	else if((recivedMenu!= 65) && (recivedMenu!= 66) && (recivedMenu!= 67) )
 80006c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006ca:	2b41      	cmp	r3, #65	; 0x41
 80006cc:	d009      	beq.n	80006e2 <bluetooth_reciveExpandedMenu_Images+0xde>
 80006ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006d2:	2b42      	cmp	r3, #66	; 0x42
 80006d4:	d005      	beq.n	80006e2 <bluetooth_reciveExpandedMenu_Images+0xde>
 80006d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006da:	2b43      	cmp	r3, #67	; 0x43
 80006dc:	d001      	beq.n	80006e2 <bluetooth_reciveExpandedMenu_Images+0xde>
	{
			bluetooth_sendNotKnowMessage();
 80006de:	f7ff ff39 	bl	8000554 <bluetooth_sendNotKnowMessage>
	}
	return recivedMenu;
 80006e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f


}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3760      	adds	r7, #96	; 0x60
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bdb0      	pop	{r4, r5, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000250 	.word	0x20000250
 80006f4:	08004288 	.word	0x08004288
 80006f8:	080042a8 	.word	0x080042a8
 80006fc:	080042c8 	.word	0x080042c8

08000700 <bluetooth_sendExpandedMenu>:
void bluetooth_sendExpandedMenu(uint8_t menuOption)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b0a6      	sub	sp, #152	; 0x98
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	const char message1[] = "Podaj kolor uzywajac RGB kodow, czyli np 255 255 255\r\nWartosci oddziel pojedycza spacja\r\n";
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <bluetooth_sendExpandedMenu+0xa4>)
 800070c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000710:	4611      	mov	r1, r2
 8000712:	225a      	movs	r2, #90	; 0x5a
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fd69 	bl	80041ec <memcpy>
	const char message2[] = "Menu wzorow:\r\nA - slonce\r\nB - kwiatek\r\nC - kregi\r\n";
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <bluetooth_sendExpandedMenu+0xa8>)
 800071c:	f107 0408 	add.w	r4, r7, #8
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	682b      	ldr	r3, [r5, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	8022      	strh	r2, [r4, #0]
 8000734:	3402      	adds	r4, #2
 8000736:	0c1b      	lsrs	r3, r3, #16
 8000738:	7023      	strb	r3, [r4, #0]
	switch(menuOption)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d024      	beq.n	800078a <bluetooth_sendExpandedMenu+0x8a>
 8000740:	2b03      	cmp	r3, #3
 8000742:	dc25      	bgt.n	8000790 <bluetooth_sendExpandedMenu+0x90>
 8000744:	2b01      	cmp	r3, #1
 8000746:	d002      	beq.n	800074e <bluetooth_sendExpandedMenu+0x4e>
 8000748:	2b02      	cmp	r3, #2
 800074a:	d00f      	beq.n	800076c <bluetooth_sendExpandedMenu+0x6c>
 800074c:	e020      	b.n	8000790 <bluetooth_sendExpandedMenu+0x90>
	{
		case 1:
			HAL_UART_Transmit(&huart2, message1, strlen(message1), HAL_MAX_DELAY);
 800074e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd4a 	bl	80001ec <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <bluetooth_sendExpandedMenu+0xac>)
 8000766:	f002 f9e6 	bl	8002b36 <HAL_UART_Transmit>
			break;
 800076a:	e017      	b.n	800079c <bluetooth_sendExpandedMenu+0x9c>
		case 2:
			HAL_UART_Transmit(&huart2, message2, strlen(message2), HAL_MAX_DELAY);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fd3b 	bl	80001ec <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	f107 0108 	add.w	r1, r7, #8
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	480a      	ldr	r0, [pc, #40]	; (80007ac <bluetooth_sendExpandedMenu+0xac>)
 8000784:	f002 f9d7 	bl	8002b36 <HAL_UART_Transmit>
			break;
 8000788:	e008      	b.n	800079c <bluetooth_sendExpandedMenu+0x9c>
		case 3:
			bluetooth_sendStartMessage();
 800078a:	f7ff feb9 	bl	8000500 <bluetooth_sendStartMessage>
			break;
 800078e:	e005      	b.n	800079c <bluetooth_sendExpandedMenu+0x9c>
		default:
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <bluetooth_sendExpandedMenu+0xb0>)
 8000796:	f001 fbb3 	bl	8001f00 <HAL_GPIO_WritePin>
			break;
 800079a:	bf00      	nop
	}

}
 800079c:	bf00      	nop
 800079e:	3798      	adds	r7, #152	; 0x98
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bdb0      	pop	{r4, r5, r7, pc}
 80007a4:	080042e8 	.word	0x080042e8
 80007a8:	08004344 	.word	0x08004344
 80007ac:	20000250 	.word	0x20000250
 80007b0:	40020400 	.word	0x40020400

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fc93 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f83b 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f973 	bl	8000aac <MX_GPIO_Init>
  MX_ETH_Init();
 80007c6:	f000 f8a1 	bl	800090c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007ca:	f000 f917 	bl	80009fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ce:	f000 f93f 	bl	8000a50 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 f8e9 	bl	80009a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t recivedMenu, recivedImage;
  uint8_t red, green, blue;

  bluetooth_sendStartMessage();
 80007d6:	f7ff fe93 	bl	8000500 <bluetooth_sendStartMessage>

  recivedMenu = bluetooth_reciveBasicMenu();
 80007da:	f7ff fee3 	bl	80005a4 <bluetooth_reciveBasicMenu>
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if((recivedMenu == 1) || (recivedMenu == 2))
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d002      	beq.n	80007ee <main+0x3a>
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d11a      	bne.n	8000824 <main+0x70>
  {
	  bluetooth_sendExpandedMenu(recivedMenu);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff85 	bl	8000700 <bluetooth_sendExpandedMenu>
	  if(recivedMenu == 1)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d109      	bne.n	8000810 <main+0x5c>
	  {
		  bluetooth_reciveExpandedMenu_Coulors(&red, &green, &blue);
 80007fc:	1d7b      	adds	r3, r7, #5
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	b2d1      	uxtb	r1, r2
 8000804:	1cfa      	adds	r2, r7, #3
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff feeb 	bl	80005e4 <bluetooth_reciveExpandedMenu_Coulors>
 800080e:	e006      	b.n	800081e <main+0x6a>
	  }
	  else if(recivedMenu == 2)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d103      	bne.n	800081e <main+0x6a>
	  {
  		recivedImage = bluetooth_reciveExpandedMenu_Images();
 8000816:	f7ff fef5 	bl	8000604 <bluetooth_reciveExpandedMenu_Images>
 800081a:	4603      	mov	r3, r0
 800081c:	71bb      	strb	r3, [r7, #6]
	  }
	  recivedMenu=0;
 800081e:	2300      	movs	r3, #0
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	e007      	b.n	8000834 <main+0x80>
  	}
  	else if( recivedMenu!=1 && recivedMenu!=2)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d004      	beq.n	8000834 <main+0x80>
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d001      	beq.n	8000834 <main+0x80>
  	{
  		bluetooth_sendNotKnowMessage();
 8000830:	f7ff fe90 	bl	8000554 <bluetooth_sendNotKnowMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000834:	e7fe      	b.n	8000834 <main+0x80>
	...

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 fcde 	bl	8004208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a27      	ldr	r2, [pc, #156]	; (8000904 <SystemClock_Config+0xcc>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <SystemClock_Config+0xd0>)
 8000882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000898:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008ac:	23a8      	movs	r3, #168	; 0xa8
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b4:	2307      	movs	r3, #7
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fc55 	bl	800216c <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c8:	f000 f99e 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2105      	movs	r1, #5
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 feb6 	bl	800265c <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008f6:	f000 f987 	bl	8000c08 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	; 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_ETH_Init+0x84>)
 8000912:	4a20      	ldr	r2, [pc, #128]	; (8000994 <MX_ETH_Init+0x88>)
 8000914:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_ETH_Init+0x8c>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_ETH_Init+0x8c>)
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ETH_Init+0x8c>)
 8000924:	22e1      	movs	r2, #225	; 0xe1
 8000926:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_ETH_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ETH_Init+0x8c>)
 8000930:	2200      	movs	r2, #0
 8000932:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_ETH_Init+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_ETH_Init+0x84>)
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <MX_ETH_Init+0x8c>)
 800093e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_ETH_Init+0x84>)
 8000942:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000946:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_ETH_Init+0x84>)
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <MX_ETH_Init+0x90>)
 800094c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_ETH_Init+0x84>)
 8000950:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <MX_ETH_Init+0x94>)
 8000952:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_ETH_Init+0x84>)
 8000956:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800095a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_ETH_Init+0x84>)
 800095e:	f000 fdfb 	bl	8001558 <HAL_ETH_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 f94e 	bl	8000c08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800096c:	2238      	movs	r2, #56	; 0x38
 800096e:	2100      	movs	r1, #0
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_ETH_Init+0x98>)
 8000972:	f003 fc49 	bl	8004208 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_ETH_Init+0x98>)
 8000978:	2221      	movs	r2, #33	; 0x21
 800097a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_ETH_Init+0x98>)
 800097e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000982:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_ETH_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001a0 	.word	0x200001a0
 8000994:	40028000 	.word	0x40028000
 8000998:	200007e4 	.word	0x200007e4
 800099c:	20000100 	.word	0x20000100
 80009a0:	20000060 	.word	0x20000060
 80009a4:	20000028 	.word	0x20000028

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f002 f85c 	bl	8002a9c <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f90d 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000250 	.word	0x20000250
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_USART3_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a34:	f002 f832 	bl	8002a9c <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f8e3 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000294 	.word	0x20000294
 8000a4c:	40004800 	.word	0x40004800

08000a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	f001 fa4d 	bl	8001f32 <HAL_PCD_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 f8b3 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200002d8 	.word	0x200002d8

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	4b45      	ldr	r3, [pc, #276]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a44      	ldr	r2, [pc, #272]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a3d      	ldr	r2, [pc, #244]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a36      	ldr	r2, [pc, #216]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a2f      	ldr	r2, [pc, #188]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_GPIO_Init+0x14c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b70:	4822      	ldr	r0, [pc, #136]	; (8000bfc <MX_GPIO_Init+0x150>)
 8000b72:	f001 f9c5 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	4821      	ldr	r0, [pc, #132]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b7c:	f001 f9c0 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	481b      	ldr	r0, [pc, #108]	; (8000c04 <MX_GPIO_Init+0x158>)
 8000b98:	f001 f806 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_GPIO_Init+0x150>)
 8000bb6:	f000 fff7 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000bd2:	f000 ffe9 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000bea:	f000 ffdd 	bl	8001ba8 <HAL_GPIO_Init>

}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	; 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40020800 	.word	0x40020800

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <Error_Handler+0x20>)
 8000c16:	f001 f973 	bl	8001f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4802      	ldr	r0, [pc, #8]	; (8000c28 <Error_Handler+0x20>)
 8000c20:	f001 f96e 	bl	8001f00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000c24:	e7f4      	b.n	8000c10 <Error_Handler+0x8>
 8000c26:	bf00      	nop
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <HAL_ETH_MspInit+0x174>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	f040 80a4 	bne.w	8000de8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	4b53      	ldr	r3, [pc, #332]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a52      	ldr	r2, [pc, #328]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	623b      	str	r3, [r7, #32]
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a4b      	ldr	r2, [pc, #300]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a44      	ldr	r2, [pc, #272]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000ce2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a3d      	ldr	r2, [pc, #244]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a28      	ldr	r2, [pc, #160]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_ETH_MspInit+0x178>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d64:	2332      	movs	r3, #50	; 0x32
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d74:	230b      	movs	r3, #11
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481e      	ldr	r0, [pc, #120]	; (8000df8 <HAL_ETH_MspInit+0x17c>)
 8000d80:	f000 ff12 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d84:	2386      	movs	r3, #134	; 0x86
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4817      	ldr	r0, [pc, #92]	; (8000dfc <HAL_ETH_MspInit+0x180>)
 8000da0:	f000 ff02 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db6:	230b      	movs	r3, #11
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480f      	ldr	r0, [pc, #60]	; (8000e00 <HAL_ETH_MspInit+0x184>)
 8000dc2:	f000 fef1 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <HAL_ETH_MspInit+0x188>)
 8000de4:	f000 fee0 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3738      	adds	r7, #56	; 0x38
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40028000 	.word	0x40028000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40021800 	.word	0x40021800

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a45      	ldr	r2, [pc, #276]	; (8000f3c <HAL_UART_MspInit+0x134>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d152      	bne.n	8000ed0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a43      	ldr	r2, [pc, #268]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a35      	ldr	r2, [pc, #212]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	482a      	ldr	r0, [pc, #168]	; (8000f44 <HAL_UART_MspInit+0x13c>)
 8000e9a:	f000 fe85 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4823      	ldr	r0, [pc, #140]	; (8000f48 <HAL_UART_MspInit+0x140>)
 8000eba:	f000 fe75 	bl	8001ba8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2026      	movs	r0, #38	; 0x26
 8000ec4:	f000 fa7f 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec8:	2026      	movs	r0, #38	; 0x26
 8000eca:	f000 fa98 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ece:	e031      	b.n	8000f34 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_UART_MspInit+0x144>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12c      	bne.n	8000f34 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_UART_MspInit+0x138>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f24:	2307      	movs	r3, #7
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <HAL_UART_MspInit+0x140>)
 8000f30:	f000 fe3a 	bl	8001ba8 <HAL_GPIO_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40004400 	.word	0x40004400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40004800 	.word	0x40004800

08000f50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f70:	d13f      	bne.n	8000ff2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4815      	ldr	r0, [pc, #84]	; (8001000 <HAL_PCD_MspInit+0xb0>)
 8000fac:	f000 fdfc 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480e      	ldr	r0, [pc, #56]	; (8001000 <HAL_PCD_MspInit+0xb0>)
 8000fc6:	f000 fdef 	bl	8001ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_PCD_MspInit+0xac>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f89a 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <USART2_IRQHandler+0x10>)
 800105e:	f001 fe2d 	bl	8002cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000250 	.word	0x20000250

0800106c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001096:	490e      	ldr	r1, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ac:	4c0b      	ldr	r4, [pc, #44]	; (80010dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ba:	f7ff ffd7 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f003 f871 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fb77 	bl	80007b4 <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010d4:	080043a0 	.word	0x080043a0
  ldr r2, =_sbss
 80010d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010dc:	200007f0 	.word	0x200007f0

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_Init+0x40>)
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_Init+0x40>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_Init+0x40>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f94f 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f808 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001118:	f7ff fd88 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023c00 	.word	0x40023c00

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x54>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x58>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f967 	bl	800141a <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f92f 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x5c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	200007ec 	.word	0x200007ec

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200007ec 	.word	0x200007ec

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff29 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff3e 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff31 	bl	8001274 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff feb6 	bl	80011b0 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d008      	beq.n	8001464 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e052      	b.n	800150a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0216 	bic.w	r2, r2, #22
 8001472:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001482:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <HAL_DMA_Abort+0x62>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0208 	bic.w	r2, r2, #8
 80014a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b4:	e013      	b.n	80014de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b6:	f7ff fe7b 	bl	80011b0 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d90c      	bls.n	80014de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2220      	movs	r2, #32
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e015      	b.n	800150a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e4      	bne.n	80014b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	223f      	movs	r2, #63	; 0x3f
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d004      	beq.n	8001530 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e00c      	b.n	800154a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2205      	movs	r2, #5
 8001534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06c      	b.n	8001644 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2223      	movs	r2, #35	; 0x23
 8001578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fb7d 	bl	8000c7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_ETH_Init+0xf4>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a30      	ldr	r2, [pc, #192]	; (800164c <HAL_ETH_Init+0xf4>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <HAL_ETH_Init+0xf4>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <HAL_ETH_Init+0xf8>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <HAL_ETH_Init+0xf8>)
 80015a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_ETH_Init+0xf8>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4927      	ldr	r1, [pc, #156]	; (8001650 <HAL_ETH_Init+0xf8>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_ETH_Init+0xf8>)
 80015ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d4:	f7ff fdec 	bl	80011b0 <HAL_GetTick>
 80015d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015da:	e011      	b.n	8001600 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015dc:	f7ff fde8 	bl	80011b0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ea:	d909      	bls.n	8001600 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	22e0      	movs	r2, #224	; 0xe0
 80015f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e021      	b.n	8001644 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1e4      	bne.n	80015dc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f958 	bl	80018c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f9ff 	bl	8001a1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fa55 	bl	8001ace <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	461a      	mov	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f9bd 	bl	80019ac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2210      	movs	r2, #16
 800163e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800

08001654 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <ETH_SetMACConfig+0x15c>)
 800166a:	4013      	ands	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	7c1b      	ldrb	r3, [r3, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <ETH_SetMACConfig+0x28>
 8001676:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800167a:	e000      	b.n	800167e <ETH_SetMACConfig+0x2a>
 800167c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	7c5b      	ldrb	r3, [r3, #17]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <ETH_SetMACConfig+0x38>
 8001686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800168a:	e000      	b.n	800168e <ETH_SetMACConfig+0x3a>
 800168c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800168e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001694:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	7fdb      	ldrb	r3, [r3, #31]
 800169a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800169c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	7f92      	ldrb	r2, [r2, #30]
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d102      	bne.n	80016b2 <ETH_SetMACConfig+0x5e>
 80016ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b0:	e000      	b.n	80016b4 <ETH_SetMACConfig+0x60>
 80016b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80016b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	7f1b      	ldrb	r3, [r3, #28]
 80016ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80016ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016d2:	2a00      	cmp	r2, #0
 80016d4:	d102      	bne.n	80016dc <ETH_SetMACConfig+0x88>
 80016d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016da:	e000      	b.n	80016de <ETH_SetMACConfig+0x8a>
 80016dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	7bdb      	ldrb	r3, [r3, #15]
 80016e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80016ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016f6:	4313      	orrs	r3, r2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fd5a 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	f64f 7341 	movw	r3, #65345	; 0xff41
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001732:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800173a:	2a00      	cmp	r2, #0
 800173c:	d101      	bne.n	8001742 <ETH_SetMACConfig+0xee>
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	e000      	b.n	8001744 <ETH_SetMACConfig+0xf0>
 8001742:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001744:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800174a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001752:	2a01      	cmp	r2, #1
 8001754:	d101      	bne.n	800175a <ETH_SetMACConfig+0x106>
 8001756:	2208      	movs	r2, #8
 8001758:	e000      	b.n	800175c <ETH_SetMACConfig+0x108>
 800175a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800175c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001764:	2a01      	cmp	r2, #1
 8001766:	d101      	bne.n	800176c <ETH_SetMACConfig+0x118>
 8001768:	2204      	movs	r2, #4
 800176a:	e000      	b.n	800176e <ETH_SetMACConfig+0x11a>
 800176c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800176e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001776:	2a01      	cmp	r2, #1
 8001778:	d101      	bne.n	800177e <ETH_SetMACConfig+0x12a>
 800177a:	2202      	movs	r2, #2
 800177c:	e000      	b.n	8001780 <ETH_SetMACConfig+0x12c>
 800177e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001780:	4313      	orrs	r3, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff fd15 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	619a      	str	r2, [r3, #24]
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	ff20810f 	.word	0xff20810f

080017b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <ETH_SetDMAConfig+0x110>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	7b1b      	ldrb	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <ETH_SetDMAConfig+0x2c>
 80017da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017de:	e000      	b.n	80017e2 <ETH_SetDMAConfig+0x2e>
 80017e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	7b5b      	ldrb	r3, [r3, #13]
 80017e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	7f52      	ldrb	r2, [r2, #29]
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d102      	bne.n	80017f8 <ETH_SetDMAConfig+0x44>
 80017f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017f6:	e000      	b.n	80017fa <ETH_SetDMAConfig+0x46>
 80017f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	7b9b      	ldrb	r3, [r3, #14]
 8001800:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001802:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001808:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	7f1b      	ldrb	r3, [r3, #28]
 800180e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001810:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	7f9b      	ldrb	r3, [r3, #30]
 8001816:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001818:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800181e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001826:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001828:	4313      	orrs	r3, r2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff fcbc 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001868:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800186e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001874:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800187c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800187e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001886:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800188c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800189a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff fc8d 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	f8de3f23 	.word	0xf8de3f23

080018c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0a6      	sub	sp, #152	; 0x98
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80018dc:	2300      	movs	r3, #0
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001904:	2300      	movs	r3, #0
 8001906:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800190e:	2300      	movs	r3, #0
 8001910:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800192a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001934:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800193c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fe86 	bl	8001654 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001948:	2301      	movs	r3, #1
 800194a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800194c:	2301      	movs	r3, #1
 800194e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001950:	2301      	movs	r3, #1
 8001952:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001956:	2301      	movs	r3, #1
 8001958:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001974:	2301      	movs	r3, #1
 8001976:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800197e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001982:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001988:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff08 	bl	80017b4 <ETH_SetDMAConfig>
}
 80019a4:	bf00      	nop
 80019a6:	3798      	adds	r7, #152	; 0x98
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3305      	adds	r3, #5
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	3204      	adds	r2, #4
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <ETH_MACAddressConfig+0x68>)
 80019ce:	4413      	add	r3, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3303      	adds	r3, #3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	061a      	lsls	r2, r3, #24
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3302      	adds	r3, #2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4313      	orrs	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <ETH_MACAddressConfig+0x6c>)
 80019fe:	4413      	add	r3, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	6013      	str	r3, [r2, #0]
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40028040 	.word	0x40028040
 8001a18:	40028044 	.word	0x40028044

08001a1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e03e      	b.n	8001aa8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68d9      	ldr	r1, [r3, #12]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	3206      	adds	r2, #6
 8001a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d80c      	bhi.n	8001a8c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68d9      	ldr	r1, [r3, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	e004      	b.n	8001a96 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d9bd      	bls.n	8001a2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac0:	611a      	str	r2, [r3, #16]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e046      	b.n	8001b6a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6919      	ldr	r1, [r3, #16]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b18:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b20:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	3212      	adds	r2, #18
 8001b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d80c      	bhi.n	8001b5a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6919      	ldr	r1, [r3, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	461a      	mov	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	e004      	b.n	8001b64 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d9b5      	bls.n	8001adc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9a:	60da      	str	r2, [r3, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e177      	b.n	8001eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 8166 	bne.w	8001eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d005      	beq.n	8001bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d130      	bne.n	8001c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80c0 	beq.w	8001eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b66      	ldr	r3, [pc, #408]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a65      	ldr	r2, [pc, #404]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a61      	ldr	r2, [pc, #388]	; (8001ed0 <HAL_GPIO_Init+0x328>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_GPIO_Init+0x32c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d037      	beq.n	8001de6 <HAL_GPIO_Init+0x23e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <HAL_GPIO_Init+0x330>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d031      	beq.n	8001de2 <HAL_GPIO_Init+0x23a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a56      	ldr	r2, [pc, #344]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d02b      	beq.n	8001dde <HAL_GPIO_Init+0x236>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a55      	ldr	r2, [pc, #340]	; (8001ee0 <HAL_GPIO_Init+0x338>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d025      	beq.n	8001dda <HAL_GPIO_Init+0x232>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a54      	ldr	r2, [pc, #336]	; (8001ee4 <HAL_GPIO_Init+0x33c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01f      	beq.n	8001dd6 <HAL_GPIO_Init+0x22e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a53      	ldr	r2, [pc, #332]	; (8001ee8 <HAL_GPIO_Init+0x340>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0x22a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_GPIO_Init+0x344>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0x226>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a51      	ldr	r2, [pc, #324]	; (8001ef0 <HAL_GPIO_Init+0x348>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_GPIO_Init+0x222>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_GPIO_Init+0x34c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <HAL_GPIO_Init+0x21e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4f      	ldr	r2, [pc, #316]	; (8001ef8 <HAL_GPIO_Init+0x350>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x21a>
 8001dbe:	2309      	movs	r3, #9
 8001dc0:	e012      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	e010      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	e00e      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00c      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dce:	2306      	movs	r3, #6
 8001dd0:	e00a      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e008      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x240>
 8001de6:	2300      	movs	r3, #0
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f002 0203 	and.w	r2, r2, #3
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	4093      	lsls	r3, r2
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df8:	4935      	ldr	r1, [pc, #212]	; (8001ed0 <HAL_GPIO_Init+0x328>)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2a:	4a34      	ldr	r2, [pc, #208]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e54:	4a29      	ldr	r2, [pc, #164]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_GPIO_Init+0x354>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	f67f ae84 	bls.w	8001bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40021400 	.word	0x40021400
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40021c00 	.word	0x40021c00
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	40022400 	.word	0x40022400
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f34:	b08f      	sub	sp, #60	; 0x3c
 8001f36:	af0a      	add	r7, sp, #40	; 0x28
 8001f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e10f      	b.n	8002164 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fff6 	bl	8000f50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fe6d 	bl	8003c62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	687e      	ldr	r6, [r7, #4]
 8001f90:	466d      	mov	r5, sp
 8001f92:	f106 0410 	add.w	r4, r6, #16
 8001f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa6:	1d33      	adds	r3, r6, #4
 8001fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	f001 fdf8 	bl	8003ba0 <USB_CoreInit>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0d0      	b.n	8002164 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fe5b 	bl	8003c84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e04a      	b.n	800206a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	333d      	adds	r3, #61	; 0x3d
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	333c      	adds	r3, #60	; 0x3c
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	b298      	uxth	r0, r3
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3344      	adds	r3, #68	; 0x44
 8002010:	4602      	mov	r2, r0
 8002012:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3340      	adds	r3, #64	; 0x40
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3348      	adds	r3, #72	; 0x48
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	334c      	adds	r3, #76	; 0x4c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3354      	adds	r3, #84	; 0x54
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	3301      	adds	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	d3af      	bcc.n	8001fd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e044      	b.n	8002104 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	3301      	adds	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3b5      	bcc.n	800207a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	687e      	ldr	r6, [r7, #4]
 8002116:	466d      	mov	r5, sp
 8002118:	f106 0410 	add.w	r4, r6, #16
 800211c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002128:	e885 0003 	stmia.w	r5, {r0, r1}
 800212c:	1d33      	adds	r3, r6, #4
 800212e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002130:	6838      	ldr	r0, [r7, #0]
 8002132:	f001 fdf3 	bl	8003d1c <USB_DevInit>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e00d      	b.n	8002164 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f001 ffbe 	bl	80040de <USB_DevDisconnect>

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800216c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e267      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d075      	beq.n	8002276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b04      	cmp	r3, #4
 8002194:	d00c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b85      	ldr	r3, [pc, #532]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d112      	bne.n	80021c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a2:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	4b7e      	ldr	r3, [pc, #504]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d05b      	beq.n	8002274 <HAL_RCC_OscConfig+0x108>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d157      	bne.n	8002274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e242      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0x74>
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a75      	ldr	r2, [pc, #468]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e01d      	b.n	800221c <HAL_RCC_OscConfig+0xb0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x98>
 80021ea:	4b70      	ldr	r3, [pc, #448]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6f      	ldr	r2, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6c      	ldr	r2, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xb0>
 8002204:	4b69      	ldr	r3, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a68      	ldr	r2, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b66      	ldr	r3, [pc, #408]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a65      	ldr	r2, [pc, #404]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe ffc4 	bl	80011b0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe ffc0 	bl	80011b0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e207      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xc0>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe ffb0 	bl	80011b0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002254:	f7fe ffac 	bl	80011b0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1f3      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0xe8>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002296:	2b08      	cmp	r3, #8
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229a:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x152>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1c7      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4937      	ldr	r1, [pc, #220]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_RCC_OscConfig+0x244>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7fe ff65 	bl	80011b0 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ea:	f7fe ff61 	bl	80011b0 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1a8      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4925      	ldr	r1, [pc, #148]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_OscConfig+0x244>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe ff44 	bl	80011b0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232c:	f7fe ff40 	bl	80011b0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e187      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d036      	beq.n	80023c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_RCC_OscConfig+0x248>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe ff24 	bl	80011b0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe ff20 	bl	80011b0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e167      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x240>)
 8002380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x200>
 800238a:	e01b      	b.n	80023c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_OscConfig+0x248>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7fe ff0d 	bl	80011b0 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	e00e      	b.n	80023b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239a:	f7fe ff09 	bl	80011b0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d907      	bls.n	80023b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e150      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470000 	.word	0x42470000
 80023b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ea      	bne.n	800239a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8097 	beq.w	8002500 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10f      	bne.n	8002402 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b7d      	ldr	r3, [pc, #500]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a7c      	ldr	r2, [pc, #496]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b7a      	ldr	r3, [pc, #488]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b77      	ldr	r3, [pc, #476]	; (80025e0 <HAL_RCC_OscConfig+0x474>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b74      	ldr	r3, [pc, #464]	; (80025e0 <HAL_RCC_OscConfig+0x474>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a73      	ldr	r2, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x474>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe fec9 	bl	80011b0 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fec5 	bl	80011b0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e10c      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x474>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x2ea>
 8002448:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a63      	ldr	r2, [pc, #396]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x324>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x30c>
 800245e:	4b5f      	ldr	r3, [pc, #380]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a5e      	ldr	r2, [pc, #376]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	4b5c      	ldr	r3, [pc, #368]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a5b      	ldr	r2, [pc, #364]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x324>
 8002478:	4b58      	ldr	r3, [pc, #352]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a57      	ldr	r2, [pc, #348]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	4b55      	ldr	r3, [pc, #340]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a54      	ldr	r2, [pc, #336]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 800248a:	f023 0304 	bic.w	r3, r3, #4
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe fe8a 	bl	80011b0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe fe86 	bl	80011b0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0cb      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	4b49      	ldr	r3, [pc, #292]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0ee      	beq.n	80024a0 <HAL_RCC_OscConfig+0x334>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7fe fe74 	bl	80011b0 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7fe fe70 	bl	80011b0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0b5      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ee      	bne.n	80024cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a38      	ldr	r2, [pc, #224]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80024fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80a1 	beq.w	800264c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800250a:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d05c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d141      	bne.n	80025a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_OscConfig+0x478>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fe44 	bl	80011b0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fe40 	bl	80011b0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e087      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b27      	ldr	r3, [pc, #156]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	491b      	ldr	r1, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x478>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe fe19 	bl	80011b0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fe15 	bl	80011b0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e05c      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x416>
 80025a0:	e054      	b.n	800264c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_OscConfig+0x478>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fe02 	bl	80011b0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fdfe 	bl	80011b0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e045      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCC_OscConfig+0x470>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x444>
 80025ce:	e03d      	b.n	800264c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e038      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40007000 	.word	0x40007000
 80025e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x4ec>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d028      	beq.n	8002648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d121      	bne.n	8002648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d11a      	bne.n	8002648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800261e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002620:	4293      	cmp	r3, r2
 8002622:	d111      	bne.n	8002648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	3b01      	subs	r3, #1
 8002632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0cc      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d90c      	bls.n	8002698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0b8      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d044      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d119      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002716:	2b03      	cmp	r3, #3
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e067      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4934      	ldr	r1, [pc, #208]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7fe fd30 	bl	80011b0 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fd2c 	bl	80011b0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e04f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d20c      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e032      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f821 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	490a      	ldr	r1, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fc90 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00
 8002818:	40023800 	.word	0x40023800
 800281c:	08004378 	.word	0x08004378
 8002820:	20000000 	.word	0x20000000
 8002824:	20000004 	.word	0x20000004

08002828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800282c:	b094      	sub	sp, #80	; 0x50
 800282e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	647b      	str	r3, [r7, #68]	; 0x44
 8002834:	2300      	movs	r3, #0
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002838:	2300      	movs	r3, #0
 800283a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002840:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d00d      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x40>
 800284c:	2b08      	cmp	r3, #8
 800284e:	f200 80e1 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x34>
 8002856:	2b04      	cmp	r3, #4
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x3a>
 800285a:	e0db      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x204>)
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002860:	e0db      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002862:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x208>)
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002866:	e0d8      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002868:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x200>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002870:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002872:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d063      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287e:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	099b      	lsrs	r3, r3, #6
 8002884:	2200      	movs	r2, #0
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
 8002888:	63fa      	str	r2, [r7, #60]	; 0x3c
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
 8002892:	2300      	movs	r3, #0
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
 8002896:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800289a:	4622      	mov	r2, r4
 800289c:	462b      	mov	r3, r5
 800289e:	f04f 0000 	mov.w	r0, #0
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	0159      	lsls	r1, r3, #5
 80028a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ac:	0150      	lsls	r0, r2, #5
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4621      	mov	r1, r4
 80028b4:	1a51      	subs	r1, r2, r1
 80028b6:	6139      	str	r1, [r7, #16]
 80028b8:	4629      	mov	r1, r5
 80028ba:	eb63 0301 	sbc.w	r3, r3, r1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028cc:	4659      	mov	r1, fp
 80028ce:	018b      	lsls	r3, r1, #6
 80028d0:	4651      	mov	r1, sl
 80028d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028d6:	4651      	mov	r1, sl
 80028d8:	018a      	lsls	r2, r1, #6
 80028da:	4651      	mov	r1, sl
 80028dc:	ebb2 0801 	subs.w	r8, r2, r1
 80028e0:	4659      	mov	r1, fp
 80028e2:	eb63 0901 	sbc.w	r9, r3, r1
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028fa:	4690      	mov	r8, r2
 80028fc:	4699      	mov	r9, r3
 80028fe:	4623      	mov	r3, r4
 8002900:	eb18 0303 	adds.w	r3, r8, r3
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	462b      	mov	r3, r5
 8002908:	eb49 0303 	adc.w	r3, r9, r3
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800291a:	4629      	mov	r1, r5
 800291c:	024b      	lsls	r3, r1, #9
 800291e:	4621      	mov	r1, r4
 8002920:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002924:	4621      	mov	r1, r4
 8002926:	024a      	lsls	r2, r1, #9
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292e:	2200      	movs	r2, #0
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
 8002932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002938:	f7fd fc60 	bl	80001fc <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4613      	mov	r3, r2
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002944:	e058      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	2200      	movs	r2, #0
 800294e:	4618      	mov	r0, r3
 8002950:	4611      	mov	r1, r2
 8002952:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
 800295c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002960:	4642      	mov	r2, r8
 8002962:	464b      	mov	r3, r9
 8002964:	f04f 0000 	mov.w	r0, #0
 8002968:	f04f 0100 	mov.w	r1, #0
 800296c:	0159      	lsls	r1, r3, #5
 800296e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002972:	0150      	lsls	r0, r2, #5
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4641      	mov	r1, r8
 800297a:	ebb2 0a01 	subs.w	sl, r2, r1
 800297e:	4649      	mov	r1, r9
 8002980:	eb63 0b01 	sbc.w	fp, r3, r1
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002990:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002994:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002998:	ebb2 040a 	subs.w	r4, r2, sl
 800299c:	eb63 050b 	sbc.w	r5, r3, fp
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	00eb      	lsls	r3, r5, #3
 80029aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ae:	00e2      	lsls	r2, r4, #3
 80029b0:	4614      	mov	r4, r2
 80029b2:	461d      	mov	r5, r3
 80029b4:	4643      	mov	r3, r8
 80029b6:	18e3      	adds	r3, r4, r3
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	464b      	mov	r3, r9
 80029bc:	eb45 0303 	adc.w	r3, r5, r3
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ce:	4629      	mov	r1, r5
 80029d0:	028b      	lsls	r3, r1, #10
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d8:	4621      	mov	r1, r4
 80029da:	028a      	lsls	r2, r1, #10
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e2:	2200      	movs	r2, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	61fa      	str	r2, [r7, #28]
 80029e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ec:	f7fd fc06 	bl	80001fc <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3750      	adds	r7, #80	; 0x50
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	007a1200 	.word	0x007a1200

08002a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000000 	.word	0x20000000

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0a9b      	lsrs	r3, r3, #10
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4903      	ldr	r1, [pc, #12]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	08004388 	.word	0x08004388

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a78:	f7ff ffdc 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0b5b      	lsrs	r3, r3, #13
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4903      	ldr	r1, [pc, #12]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08004388 	.word	0x08004388

08002a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e03f      	b.n	8002b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe f9a0 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fde9 	bl	80036b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b08a      	sub	sp, #40	; 0x28
 8002b3a:	af02      	add	r7, sp, #8
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d17c      	bne.n	8002c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_Transmit+0x2c>
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e075      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Transmit+0x3e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e06e      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2221      	movs	r2, #33	; 0x21
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe fb11 	bl	80011b0 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x82>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bc8:	e02a      	b.n	8002c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fb29 	bl	800322c <UART_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e036      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10b      	bne.n	8002c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e007      	b.n	8002c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1cf      	bne.n	8002bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 faf9 	bl	800322c <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e006      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e000      	b.n	8002c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	4613      	mov	r3, r2
 8002c66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d11d      	bne.n	8002cb0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_Receive_IT+0x26>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e016      	b.n	8002cb2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Receive_IT+0x38>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e00f      	b.n	8002cb2 <HAL_UART_Receive_IT+0x58>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fb2e 	bl	8003308 <UART_Start_Receive_IT>
 8002cac:	4603      	mov	r3, r0
 8002cae:	e000      	b.n	8002cb2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0ba      	sub	sp, #232	; 0xe8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_UART_IRQHandler+0x66>
 8002d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fc11 	bl	8003542 <UART_Receive_IT>
      return;
 8002d20:	e256      	b.n	80031d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80de 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x22c>
 8002d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80d1 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_UART_IRQHandler+0xae>
 8002d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_UART_IRQHandler+0xd2>
 8002d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_UART_IRQHandler+0xf6>
 8002d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0204 	orr.w	r2, r3, #4
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d011      	beq.n	8002de2 <HAL_UART_IRQHandler+0x126>
 8002dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d105      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0208 	orr.w	r2, r3, #8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 81ed 	beq.w	80031c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_UART_IRQHandler+0x14e>
 8002df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fb9c 	bl	8003542 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_UART_IRQHandler+0x17a>
 8002e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d04f      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 faa4 	bl	8003384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d141      	bne.n	8002ece <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1d9      	bne.n	8002e4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d013      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	4a7d      	ldr	r2, [pc, #500]	; (8003098 <HAL_UART_IRQHandler+0x3dc>)
 8002ea4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fb31 	bl	8001512 <HAL_DMA_Abort_IT>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	e00e      	b.n	8002ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f99a 	bl	8003200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	e00a      	b.n	8002ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f996 	bl	8003200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	e006      	b.n	8002ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f992 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ee2:	e170      	b.n	80031c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	bf00      	nop
    return;
 8002ee6:	e16e      	b.n	80031c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	f040 814a 	bne.w	8003186 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8143 	beq.w	8003186 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 813c 	beq.w	8003186 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	f040 80b4 	bne.w	800309c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8140 	beq.w	80031ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f52:	429a      	cmp	r2, r3
 8002f54:	f080 8139 	bcs.w	80031ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6a:	f000 8088 	beq.w	800307e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1d9      	bne.n	8002f6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e1      	bne.n	8002fba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3314      	adds	r3, #20
 8003016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800301a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800301c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e3      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800304c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304e:	f023 0310 	bic.w	r3, r3, #16
 8003052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003060:	65ba      	str	r2, [r7, #88]	; 0x58
 8003062:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e3      	bne.n	800303c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe f9da 	bl	8001432 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003086:	b29b      	uxth	r3, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b29b      	uxth	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8c0 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003094:	e099      	b.n	80031ca <HAL_UART_IRQHandler+0x50e>
 8003096:	bf00      	nop
 8003098:	0800344b 	.word	0x0800344b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 808b 	beq.w	80031ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80030b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8086 	beq.w	80031ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030e6:	647a      	str	r2, [r7, #68]	; 0x44
 80030e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e3      	bne.n	80030c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	623b      	str	r3, [r7, #32]
   return(result);
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3314      	adds	r3, #20
 800311a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800311e:	633a      	str	r2, [r7, #48]	; 0x30
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e3      	bne.n	80030fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0310 	bic.w	r3, r3, #16
 8003156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003164:	61fa      	str	r2, [r7, #28]
 8003166:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	69b9      	ldr	r1, [r7, #24]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	617b      	str	r3, [r7, #20]
   return(result);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e3      	bne.n	8003140 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f848 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003184:	e023      	b.n	80031ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_UART_IRQHandler+0x4ea>
 8003192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f967 	bl	8003472 <UART_Transmit_IT>
    return;
 80031a4:	e014      	b.n	80031d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <HAL_UART_IRQHandler+0x514>
 80031b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f9a7 	bl	8003512 <UART_EndTransmit_IT>
    return;
 80031c4:	e004      	b.n	80031d0 <HAL_UART_IRQHandler+0x514>
    return;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <HAL_UART_IRQHandler+0x514>
      return;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <HAL_UART_IRQHandler+0x514>
      return;
 80031ce:	bf00      	nop
  }
}
 80031d0:	37e8      	adds	r7, #232	; 0xe8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop

080031d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b090      	sub	sp, #64	; 0x40
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323c:	e050      	b.n	80032e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d04c      	beq.n	80032e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <UART_WaitOnFlagUntilTimeout+0x30>
 800324c:	f7fd ffb0 	bl	80011b0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003258:	429a      	cmp	r2, r3
 800325a:	d241      	bcs.n	80032e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800327c:	637a      	str	r2, [r7, #52]	; 0x34
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3314      	adds	r3, #20
 8003296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	613b      	str	r3, [r7, #16]
   return(result);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b0:	623a      	str	r2, [r7, #32]
 80032b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	69f9      	ldr	r1, [r7, #28]
 80032b6:	6a3a      	ldr	r2, [r7, #32]
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e5      	bne.n	8003290 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e00f      	b.n	8003300 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d09f      	beq.n	800323e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3740      	adds	r7, #64	; 0x40
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2222      	movs	r2, #34	; 0x22
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003354:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0220 	orr.w	r2, r2, #32
 8003374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b095      	sub	sp, #84	; 0x54
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033ac:	643a      	str	r2, [r7, #64]	; 0x40
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e5      	bne.n	800338c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3314      	adds	r3, #20
 80033c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d119      	bne.n	8003430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	60bb      	str	r3, [r7, #8]
   return(result);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800341c:	61ba      	str	r2, [r7, #24]
 800341e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6979      	ldr	r1, [r7, #20]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	613b      	str	r3, [r7, #16]
   return(result);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800343e:	bf00      	nop
 8003440:	3754      	adds	r7, #84	; 0x54
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff fecb 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b21      	cmp	r3, #33	; 0x21
 8003484:	d13e      	bne.n	8003504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d114      	bne.n	80034ba <UART_Transmit_IT+0x48>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d110      	bne.n	80034ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]
 80034b8:	e008      	b.n	80034cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	1c59      	adds	r1, r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6211      	str	r1, [r2, #32]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4619      	mov	r1, r3
 80034da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003528:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fe50 	bl	80031d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b08c      	sub	sp, #48	; 0x30
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b22      	cmp	r3, #34	; 0x22
 8003554:	f040 80ab 	bne.w	80036ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003560:	d117      	bne.n	8003592 <UART_Receive_IT+0x50>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d113      	bne.n	8003592 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003580:	b29a      	uxth	r2, r3
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	1c9a      	adds	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
 8003590:	e026      	b.n	80035e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003598:	2300      	movs	r3, #0
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d007      	beq.n	80035b6 <UART_Receive_IT+0x74>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <UART_Receive_IT+0x82>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e008      	b.n	80035d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4619      	mov	r1, r3
 80035ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d15a      	bne.n	80036aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0220 	bic.w	r2, r2, #32
 8003602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b01      	cmp	r3, #1
 8003632:	d135      	bne.n	80036a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	613b      	str	r3, [r7, #16]
   return(result);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f023 0310 	bic.w	r3, r3, #16
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	623a      	str	r2, [r7, #32]
 800365c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	69f9      	ldr	r1, [r7, #28]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	61bb      	str	r3, [r7, #24]
   return(result);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d10a      	bne.n	8003692 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fdbb 	bl	8003214 <HAL_UARTEx_RxEventCallback>
 800369e:	e002      	b.n	80036a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fda3 	bl	80031ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e002      	b.n	80036b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3730      	adds	r7, #48	; 0x30
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036bc:	b0c0      	sub	sp, #256	; 0x100
 80036be:	af00      	add	r7, sp, #0
 80036c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	68d9      	ldr	r1, [r3, #12]
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	ea40 0301 	orr.w	r3, r0, r1
 80036e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003710:	f021 010c 	bic.w	r1, r1, #12
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800371e:	430b      	orrs	r3, r1
 8003720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	6999      	ldr	r1, [r3, #24]
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	ea40 0301 	orr.w	r3, r0, r1
 800373e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b8f      	ldr	r3, [pc, #572]	; (8003984 <UART_SetConfig+0x2cc>)
 8003748:	429a      	cmp	r2, r3
 800374a:	d005      	beq.n	8003758 <UART_SetConfig+0xa0>
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <UART_SetConfig+0x2d0>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d104      	bne.n	8003762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7ff f98c 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 800375c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003760:	e003      	b.n	800376a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7ff f973 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8003766:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	f040 810c 	bne.w	8003990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377c:	2200      	movs	r2, #0
 800377e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003782:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	1891      	adds	r1, r2, r2
 8003790:	65b9      	str	r1, [r7, #88]	; 0x58
 8003792:	415b      	adcs	r3, r3
 8003794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800379a:	4621      	mov	r1, r4
 800379c:	eb12 0801 	adds.w	r8, r2, r1
 80037a0:	4629      	mov	r1, r5
 80037a2:	eb43 0901 	adc.w	r9, r3, r1
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ba:	4690      	mov	r8, r2
 80037bc:	4699      	mov	r9, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	eb18 0303 	adds.w	r3, r8, r3
 80037c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037c8:	462b      	mov	r3, r5
 80037ca:	eb49 0303 	adc.w	r3, r9, r3
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037e6:	460b      	mov	r3, r1
 80037e8:	18db      	adds	r3, r3, r3
 80037ea:	653b      	str	r3, [r7, #80]	; 0x50
 80037ec:	4613      	mov	r3, r2
 80037ee:	eb42 0303 	adc.w	r3, r2, r3
 80037f2:	657b      	str	r3, [r7, #84]	; 0x54
 80037f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037fc:	f7fc fcfe 	bl	80001fc <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4b61      	ldr	r3, [pc, #388]	; (800398c <UART_SetConfig+0x2d4>)
 8003806:	fba3 2302 	umull	r2, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	011c      	lsls	r4, r3, #4
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003818:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800381c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	64b9      	str	r1, [r7, #72]	; 0x48
 8003828:	415b      	adcs	r3, r3
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800382c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003830:	4641      	mov	r1, r8
 8003832:	eb12 0a01 	adds.w	sl, r2, r1
 8003836:	4649      	mov	r1, r9
 8003838:	eb43 0b01 	adc.w	fp, r3, r1
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800384c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003850:	4692      	mov	sl, r2
 8003852:	469b      	mov	fp, r3
 8003854:	4643      	mov	r3, r8
 8003856:	eb1a 0303 	adds.w	r3, sl, r3
 800385a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800385e:	464b      	mov	r3, r9
 8003860:	eb4b 0303 	adc.w	r3, fp, r3
 8003864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003874:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800387c:	460b      	mov	r3, r1
 800387e:	18db      	adds	r3, r3, r3
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
 8003882:	4613      	mov	r3, r2
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
 800388a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800388e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003892:	f7fc fcb3 	bl	80001fc <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4611      	mov	r1, r2
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <UART_SetConfig+0x2d4>)
 800389e:	fba3 2301 	umull	r2, r3, r3, r1
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2264      	movs	r2, #100	; 0x64
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	1acb      	subs	r3, r1, r3
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <UART_SetConfig+0x2d4>)
 80038b4:	fba3 2302 	umull	r2, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038c0:	441c      	add	r4, r3
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	63b9      	str	r1, [r7, #56]	; 0x38
 80038dc:	415b      	adcs	r3, r3
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038e4:	4641      	mov	r1, r8
 80038e6:	1851      	adds	r1, r2, r1
 80038e8:	6339      	str	r1, [r7, #48]	; 0x30
 80038ea:	4649      	mov	r1, r9
 80038ec:	414b      	adcs	r3, r1
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038fc:	4659      	mov	r1, fp
 80038fe:	00cb      	lsls	r3, r1, #3
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003906:	4651      	mov	r1, sl
 8003908:	00ca      	lsls	r2, r1, #3
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	4603      	mov	r3, r0
 8003910:	4642      	mov	r2, r8
 8003912:	189b      	adds	r3, r3, r2
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003918:	464b      	mov	r3, r9
 800391a:	460a      	mov	r2, r1
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003930:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003938:	460b      	mov	r3, r1
 800393a:	18db      	adds	r3, r3, r3
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
 800393e:	4613      	mov	r3, r2
 8003940:	eb42 0303 	adc.w	r3, r2, r3
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800394a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800394e:	f7fc fc55 	bl	80001fc <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <UART_SetConfig+0x2d4>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	3332      	adds	r3, #50	; 0x32
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <UART_SetConfig+0x2d4>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4422      	add	r2, r4
 800397e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003980:	e105      	b.n	8003b8e <UART_SetConfig+0x4d6>
 8003982:	bf00      	nop
 8003984:	40011000 	.word	0x40011000
 8003988:	40011400 	.word	0x40011400
 800398c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800399a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800399e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039a2:	4642      	mov	r2, r8
 80039a4:	464b      	mov	r3, r9
 80039a6:	1891      	adds	r1, r2, r2
 80039a8:	6239      	str	r1, [r7, #32]
 80039aa:	415b      	adcs	r3, r3
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039b2:	4641      	mov	r1, r8
 80039b4:	1854      	adds	r4, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb43 0501 	adc.w	r5, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	00eb      	lsls	r3, r5, #3
 80039c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ca:	00e2      	lsls	r2, r4, #3
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4643      	mov	r3, r8
 80039d2:	18e3      	adds	r3, r4, r3
 80039d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039d8:	464b      	mov	r3, r9
 80039da:	eb45 0303 	adc.w	r3, r5, r3
 80039de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039fe:	4629      	mov	r1, r5
 8003a00:	008b      	lsls	r3, r1, #2
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a08:	4621      	mov	r1, r4
 8003a0a:	008a      	lsls	r2, r1, #2
 8003a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a10:	f7fc fbf4 	bl	80001fc <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b60      	ldr	r3, [pc, #384]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	011c      	lsls	r4, r3, #4
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	61b9      	str	r1, [r7, #24]
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	4641      	mov	r1, r8
 8003a46:	1851      	adds	r1, r2, r1
 8003a48:	6139      	str	r1, [r7, #16]
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	00cb      	lsls	r3, r1, #3
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a66:	4651      	mov	r1, sl
 8003a68:	00ca      	lsls	r2, r1, #3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4642      	mov	r2, r8
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a78:	464b      	mov	r3, r9
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	008b      	lsls	r3, r1, #2
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	008a      	lsls	r2, r1, #2
 8003aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aae:	f7fc fba5 	bl	80001fc <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2164      	movs	r1, #100	; 0x64
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	3332      	adds	r3, #50	; 0x32
 8003aca:	4a34      	ldr	r2, [pc, #208]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad6:	441c      	add	r4, r3
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003adc:	2200      	movs	r2, #0
 8003ade:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ae6:	4642      	mov	r2, r8
 8003ae8:	464b      	mov	r3, r9
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	415b      	adcs	r3, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af6:	4641      	mov	r1, r8
 8003af8:	1851      	adds	r1, r2, r1
 8003afa:	6039      	str	r1, [r7, #0]
 8003afc:	4649      	mov	r1, r9
 8003afe:	414b      	adcs	r3, r1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b0e:	4659      	mov	r1, fp
 8003b10:	00cb      	lsls	r3, r1, #3
 8003b12:	4651      	mov	r1, sl
 8003b14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b18:	4651      	mov	r1, sl
 8003b1a:	00ca      	lsls	r2, r1, #3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4603      	mov	r3, r0
 8003b22:	4642      	mov	r2, r8
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b28:	464b      	mov	r3, r9
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	008b      	lsls	r3, r1, #2
 8003b4e:	4641      	mov	r1, r8
 8003b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b54:	4641      	mov	r1, r8
 8003b56:	008a      	lsls	r2, r1, #2
 8003b58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b5c:	f7fc fb4e 	bl	80001fc <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003b66:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2164      	movs	r1, #100	; 0x64
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	3332      	adds	r3, #50	; 0x32
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <UART_SetConfig+0x4e4>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	f003 020f 	and.w	r2, r3, #15
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4422      	add	r2, r4
 8003b8c:	609a      	str	r2, [r3, #8]
}
 8003b8e:	bf00      	nop
 8003b90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	51eb851f 	.word	0x51eb851f

08003ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	f107 001c 	add.w	r0, r7, #28
 8003bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d122      	bne.n	8003bfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 faa2 	bl	800413c <USB_CoreReset>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e01a      	b.n	8003c34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa96 	bl	800413c <USB_CoreReset>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
 8003c26:	e005      	b.n	8003c34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10b      	bne.n	8003c52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f043 0206 	orr.w	r2, r3, #6
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c5e:	b004      	add	sp, #16
 8003c60:	4770      	bx	lr

08003c62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d115      	bne.n	8003cd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f7fd fa88 	bl	80011c8 <HAL_Delay>
      ms++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa2e 	bl	8004120 <USB_GetMode>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d01e      	beq.n	8003d08 <USB_SetCurrentMode+0x84>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b31      	cmp	r3, #49	; 0x31
 8003cce:	d9f0      	bls.n	8003cb2 <USB_SetCurrentMode+0x2e>
 8003cd0:	e01a      	b.n	8003d08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d115      	bne.n	8003d04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f7fd fa6f 	bl	80011c8 <HAL_Delay>
      ms++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fa15 	bl	8004120 <USB_GetMode>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <USB_SetCurrentMode+0x84>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b31      	cmp	r3, #49	; 0x31
 8003d00:	d9f0      	bls.n	8003ce4 <USB_SetCurrentMode+0x60>
 8003d02:	e001      	b.n	8003d08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e005      	b.n	8003d14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b32      	cmp	r3, #50	; 0x32
 8003d0c:	d101      	bne.n	8003d12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	e009      	b.n	8003d50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3340      	adds	r3, #64	; 0x40
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b0e      	cmp	r3, #14
 8003d54:	d9f2      	bls.n	8003d3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11c      	bne.n	8003d96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
 8003d94:	e00b      	b.n	8003dae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003db4:	461a      	mov	r2, r3
 8003db6:	2300      	movs	r3, #0
 8003db8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc8:	461a      	mov	r2, r3
 8003dca:	680b      	ldr	r3, [r1, #0]
 8003dcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d10c      	bne.n	8003dee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f965 	bl	80040ac <USB_SetDevSpeed>
 8003de2:	e008      	b.n	8003df6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003de4:	2101      	movs	r1, #1
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f960 	bl	80040ac <USB_SetDevSpeed>
 8003dec:	e003      	b.n	8003df6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003dee:	2103      	movs	r1, #3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f95b 	bl	80040ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003df6:	2110      	movs	r1, #16
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8f3 	bl	8003fe4 <USB_FlushTxFifo>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f91f 	bl	800404c <USB_FlushRxFifo>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2300      	movs	r3, #0
 8003e22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	461a      	mov	r2, r3
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	e043      	b.n	8003eca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e58:	d118      	bne.n	8003e8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e013      	b.n	8003e9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	461a      	mov	r2, r3
 8003e84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e008      	b.n	8003e9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ec2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3b7      	bcc.n	8003e42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	e043      	b.n	8003f60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eee:	d118      	bne.n	8003f22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f02:	461a      	mov	r2, r3
 8003f04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e013      	b.n	8003f34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e008      	b.n	8003f34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2300      	movs	r3, #0
 8003f32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	2300      	movs	r3, #0
 8003f44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f52:	461a      	mov	r2, r3
 8003f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d3b7      	bcc.n	8003ed8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f043 0210 	orr.w	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <USB_DevInit+0x2c4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f043 0208 	orr.w	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fdc:	b004      	add	sp, #16
 8003fde:	4770      	bx	lr
 8003fe0:	803c3800 	.word	0x803c3800

08003fe4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <USB_FlushTxFifo+0x64>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d901      	bls.n	8004004 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e01b      	b.n	800403c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	daf2      	bge.n	8003ff2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	019b      	lsls	r3, r3, #6
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a08      	ldr	r2, [pc, #32]	; (8004048 <USB_FlushTxFifo+0x64>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e006      	b.n	800403c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b20      	cmp	r3, #32
 8004038:	d0f0      	beq.n	800401c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	00030d40 	.word	0x00030d40

0800404c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <USB_FlushRxFifo+0x5c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e018      	b.n	800409c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	daf2      	bge.n	8004058 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2210      	movs	r2, #16
 800407a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <USB_FlushRxFifo+0x5c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e006      	b.n	800409c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d0f0      	beq.n	800407c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	00030d40 	.word	0x00030d40

080040ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040cc:	4313      	orrs	r3, r2
 80040ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040f8:	f023 0303 	bic.w	r3, r3, #3
 80040fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0301 	and.w	r3, r3, #1
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <USB_CoreReset+0x64>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e01b      	b.n	8004192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	daf2      	bge.n	8004148 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <USB_CoreReset+0x64>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e006      	b.n	8004192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d0f0      	beq.n	8004172 <USB_CoreReset+0x36>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	00030d40 	.word	0x00030d40

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4d0d      	ldr	r5, [pc, #52]	; (80041dc <__libc_init_array+0x38>)
 80041a8:	4c0d      	ldr	r4, [pc, #52]	; (80041e0 <__libc_init_array+0x3c>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	2600      	movs	r6, #0
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	4d0b      	ldr	r5, [pc, #44]	; (80041e4 <__libc_init_array+0x40>)
 80041b6:	4c0c      	ldr	r4, [pc, #48]	; (80041e8 <__libc_init_array+0x44>)
 80041b8:	f000 f82e 	bl	8004218 <_init>
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2600      	movs	r6, #0
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	08004398 	.word	0x08004398
 80041e0:	08004398 	.word	0x08004398
 80041e4:	08004398 	.word	0x08004398
 80041e8:	0800439c 	.word	0x0800439c

080041ec <memcpy>:
 80041ec:	440a      	add	r2, r1
 80041ee:	4291      	cmp	r1, r2
 80041f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041f4:	d100      	bne.n	80041f8 <memcpy+0xc>
 80041f6:	4770      	bx	lr
 80041f8:	b510      	push	{r4, lr}
 80041fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004202:	4291      	cmp	r1, r2
 8004204:	d1f9      	bne.n	80041fa <memcpy+0xe>
 8004206:	bd10      	pop	{r4, pc}

08004208 <memset>:
 8004208:	4402      	add	r2, r0
 800420a:	4603      	mov	r3, r0
 800420c:	4293      	cmp	r3, r2
 800420e:	d100      	bne.n	8004212 <memset+0xa>
 8004210:	4770      	bx	lr
 8004212:	f803 1b01 	strb.w	r1, [r3], #1
 8004216:	e7f9      	b.n	800420c <memset+0x4>

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr
